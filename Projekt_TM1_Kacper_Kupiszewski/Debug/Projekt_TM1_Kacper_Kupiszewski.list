
Projekt_TM1_Kacper_Kupiszewski.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c70  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08004d80  08004d80  00014d80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fd0  08004fd0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004fd0  08004fd0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004fd0  08004fd0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fd0  08004fd0  00014fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fd4  08004fd4  00014fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004fd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000074  0800504c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  0800504c  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008317  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001487  00000000  00000000  000283b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008e8  00000000  00000000  00029840  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000830  00000000  00000000  0002a128  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000144f3  00000000  00000000  0002a958  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006a3d  00000000  00000000  0003ee4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000754a6  00000000  00000000  00045888  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bad2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002998  00000000  00000000  000badac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08004d68 	.word	0x08004d68

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08004d68 	.word	0x08004d68

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000ba8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bac:	d1ed      	bne.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d5a:	2afd      	cmp	r2, #253	; 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	; 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	; 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	; 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <__aeabi_f2uiz>:
 8000fa8:	0042      	lsls	r2, r0, #1
 8000faa:	d20e      	bcs.n	8000fca <__aeabi_f2uiz+0x22>
 8000fac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fb0:	d30b      	bcc.n	8000fca <__aeabi_f2uiz+0x22>
 8000fb2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fb6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fba:	d409      	bmi.n	8000fd0 <__aeabi_f2uiz+0x28>
 8000fbc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fc4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fc8:	4770      	bx	lr
 8000fca:	f04f 0000 	mov.w	r0, #0
 8000fce:	4770      	bx	lr
 8000fd0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fd4:	d101      	bne.n	8000fda <__aeabi_f2uiz+0x32>
 8000fd6:	0242      	lsls	r2, r0, #9
 8000fd8:	d102      	bne.n	8000fe0 <__aeabi_f2uiz+0x38>
 8000fda:	f04f 30ff 	mov.w	r0, #4294967295
 8000fde:	4770      	bx	lr
 8000fe0:	f04f 0000 	mov.w	r0, #0
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <main>:
static void MX_TIM4_Init(void);
float PWM_Function_Linear(float val);


int main(void)
{
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b089      	sub	sp, #36	; 0x24
 8000fec:	af00      	add	r7, sp, #0
  HAL_Init();
 8000fee:	f000 fcd3 	bl	8001998 <HAL_Init>
  SystemClock_Config();
 8000ff2:	f000 f9fb 	bl	80013ec <SystemClock_Config>

  MX_GPIO_Init();
 8000ff6:	f000 fa7d 	bl	80014f4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ffa:	f000 fa3d 	bl	8001478 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000ffe:	f000 faf3 	bl	80015e8 <MX_TIM4_Init>

  uint16_t counter = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	83fb      	strh	r3, [r7, #30]
  mode = 0;
 8001006:	4bb7      	ldr	r3, [pc, #732]	; (80012e4 <main+0x2fc>)
 8001008:	2200      	movs	r2, #0
 800100a:	701a      	strb	r2, [r3, #0]
  uint16_t data_LSB;

  while (1)
  {
	  data_LSB = HAL_ADC_GetValue(&hadc1);
 800100c:	48b6      	ldr	r0, [pc, #728]	; (80012e8 <main+0x300>)
 800100e:	f000 ffc7 	bl	8001fa0 <HAL_ADC_GetValue>
 8001012:	4603      	mov	r3, r0
 8001014:	83bb      	strh	r3, [r7, #28]

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|
 8001016:	2200      	movs	r2, #0
 8001018:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800101c:	48b3      	ldr	r0, [pc, #716]	; (80012ec <main+0x304>)
 800101e:	f001 fbb7 	bl	8002790 <HAL_GPIO_WritePin>
	      		 GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

	  if(mode == 1){
 8001022:	4bb0      	ldr	r3, [pc, #704]	; (80012e4 <main+0x2fc>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b01      	cmp	r3, #1
 8001028:	f040 80a7 	bne.w	800117a <main+0x192>
		  float r = (float)(50 * sin(counter / 100.0) + 50);
 800102c:	8bfb      	ldrh	r3, [r7, #30]
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff f9e0 	bl	80003f4 <__aeabi_i2d>
 8001034:	f04f 0200 	mov.w	r2, #0
 8001038:	4bad      	ldr	r3, [pc, #692]	; (80012f0 <main+0x308>)
 800103a:	f7ff fb6f 	bl	800071c <__aeabi_ddiv>
 800103e:	4603      	mov	r3, r0
 8001040:	460c      	mov	r4, r1
 8001042:	4618      	mov	r0, r3
 8001044:	4621      	mov	r1, r4
 8001046:	f002 fcbb 	bl	80039c0 <sin>
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	4ba9      	ldr	r3, [pc, #676]	; (80012f4 <main+0x30c>)
 8001050:	f7ff fa3a 	bl	80004c8 <__aeabi_dmul>
 8001054:	4603      	mov	r3, r0
 8001056:	460c      	mov	r4, r1
 8001058:	4618      	mov	r0, r3
 800105a:	4621      	mov	r1, r4
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	4ba4      	ldr	r3, [pc, #656]	; (80012f4 <main+0x30c>)
 8001062:	f7ff f87b 	bl	800015c <__adddf3>
 8001066:	4603      	mov	r3, r0
 8001068:	460c      	mov	r4, r1
 800106a:	4618      	mov	r0, r3
 800106c:	4621      	mov	r1, r4
 800106e:	f7ff fced 	bl	8000a4c <__aeabi_d2f>
 8001072:	4603      	mov	r3, r0
 8001074:	60bb      	str	r3, [r7, #8]
		  float g = (float)(50 * sin(counter / 100.0 - 1 ) + 50);
 8001076:	8bfb      	ldrh	r3, [r7, #30]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff f9bb 	bl	80003f4 <__aeabi_i2d>
 800107e:	f04f 0200 	mov.w	r2, #0
 8001082:	4b9b      	ldr	r3, [pc, #620]	; (80012f0 <main+0x308>)
 8001084:	f7ff fb4a 	bl	800071c <__aeabi_ddiv>
 8001088:	4603      	mov	r3, r0
 800108a:	460c      	mov	r4, r1
 800108c:	4618      	mov	r0, r3
 800108e:	4621      	mov	r1, r4
 8001090:	f04f 0200 	mov.w	r2, #0
 8001094:	4b98      	ldr	r3, [pc, #608]	; (80012f8 <main+0x310>)
 8001096:	f7ff f85f 	bl	8000158 <__aeabi_dsub>
 800109a:	4603      	mov	r3, r0
 800109c:	460c      	mov	r4, r1
 800109e:	4618      	mov	r0, r3
 80010a0:	4621      	mov	r1, r4
 80010a2:	f002 fc8d 	bl	80039c0 <sin>
 80010a6:	f04f 0200 	mov.w	r2, #0
 80010aa:	4b92      	ldr	r3, [pc, #584]	; (80012f4 <main+0x30c>)
 80010ac:	f7ff fa0c 	bl	80004c8 <__aeabi_dmul>
 80010b0:	4603      	mov	r3, r0
 80010b2:	460c      	mov	r4, r1
 80010b4:	4618      	mov	r0, r3
 80010b6:	4621      	mov	r1, r4
 80010b8:	f04f 0200 	mov.w	r2, #0
 80010bc:	4b8d      	ldr	r3, [pc, #564]	; (80012f4 <main+0x30c>)
 80010be:	f7ff f84d 	bl	800015c <__adddf3>
 80010c2:	4603      	mov	r3, r0
 80010c4:	460c      	mov	r4, r1
 80010c6:	4618      	mov	r0, r3
 80010c8:	4621      	mov	r1, r4
 80010ca:	f7ff fcbf 	bl	8000a4c <__aeabi_d2f>
 80010ce:	4603      	mov	r3, r0
 80010d0:	607b      	str	r3, [r7, #4]
		  float b = (float)(50 * sin(counter / 100.0 - 2 ) + 50);
 80010d2:	8bfb      	ldrh	r3, [r7, #30]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff f98d 	bl	80003f4 <__aeabi_i2d>
 80010da:	f04f 0200 	mov.w	r2, #0
 80010de:	4b84      	ldr	r3, [pc, #528]	; (80012f0 <main+0x308>)
 80010e0:	f7ff fb1c 	bl	800071c <__aeabi_ddiv>
 80010e4:	4603      	mov	r3, r0
 80010e6:	460c      	mov	r4, r1
 80010e8:	4618      	mov	r0, r3
 80010ea:	4621      	mov	r1, r4
 80010ec:	f04f 0200 	mov.w	r2, #0
 80010f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010f4:	f7ff f830 	bl	8000158 <__aeabi_dsub>
 80010f8:	4603      	mov	r3, r0
 80010fa:	460c      	mov	r4, r1
 80010fc:	4618      	mov	r0, r3
 80010fe:	4621      	mov	r1, r4
 8001100:	f002 fc5e 	bl	80039c0 <sin>
 8001104:	f04f 0200 	mov.w	r2, #0
 8001108:	4b7a      	ldr	r3, [pc, #488]	; (80012f4 <main+0x30c>)
 800110a:	f7ff f9dd 	bl	80004c8 <__aeabi_dmul>
 800110e:	4603      	mov	r3, r0
 8001110:	460c      	mov	r4, r1
 8001112:	4618      	mov	r0, r3
 8001114:	4621      	mov	r1, r4
 8001116:	f04f 0200 	mov.w	r2, #0
 800111a:	4b76      	ldr	r3, [pc, #472]	; (80012f4 <main+0x30c>)
 800111c:	f7ff f81e 	bl	800015c <__adddf3>
 8001120:	4603      	mov	r3, r0
 8001122:	460c      	mov	r4, r1
 8001124:	4618      	mov	r0, r3
 8001126:	4621      	mov	r1, r4
 8001128:	f7ff fc90 	bl	8000a4c <__aeabi_d2f>
 800112c:	4603      	mov	r3, r0
 800112e:	603b      	str	r3, [r7, #0]

		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWM_Function_Linear(r));
 8001130:	68b8      	ldr	r0, [r7, #8]
 8001132:	f000 fac1 	bl	80016b8 <PWM_Function_Linear>
 8001136:	4602      	mov	r2, r0
 8001138:	4b70      	ldr	r3, [pc, #448]	; (80012fc <main+0x314>)
 800113a:	681c      	ldr	r4, [r3, #0]
 800113c:	4610      	mov	r0, r2
 800113e:	f7ff ff33 	bl	8000fa8 <__aeabi_f2uiz>
 8001142:	4603      	mov	r3, r0
 8001144:	6363      	str	r3, [r4, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, PWM_Function_Linear(g));
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f000 fab6 	bl	80016b8 <PWM_Function_Linear>
 800114c:	4602      	mov	r2, r0
 800114e:	4b6b      	ldr	r3, [pc, #428]	; (80012fc <main+0x314>)
 8001150:	681c      	ldr	r4, [r3, #0]
 8001152:	4610      	mov	r0, r2
 8001154:	f7ff ff28 	bl	8000fa8 <__aeabi_f2uiz>
 8001158:	4603      	mov	r3, r0
 800115a:	63a3      	str	r3, [r4, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, PWM_Function_Linear(b));
 800115c:	6838      	ldr	r0, [r7, #0]
 800115e:	f000 faab 	bl	80016b8 <PWM_Function_Linear>
 8001162:	4602      	mov	r2, r0
 8001164:	4b65      	ldr	r3, [pc, #404]	; (80012fc <main+0x314>)
 8001166:	681c      	ldr	r4, [r3, #0]
 8001168:	4610      	mov	r0, r2
 800116a:	f7ff ff1d 	bl	8000fa8 <__aeabi_f2uiz>
 800116e:	4603      	mov	r3, r0
 8001170:	63e3      	str	r3, [r4, #60]	; 0x3c

		  counter++;
 8001172:	8bfb      	ldrh	r3, [r7, #30]
 8001174:	3301      	adds	r3, #1
 8001176:	83fb      	strh	r3, [r7, #30]
 8001178:	e0ce      	b.n	8001318 <main+0x330>
	  }
	  else if(mode == 2){
 800117a:	4b5a      	ldr	r3, [pc, #360]	; (80012e4 <main+0x2fc>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b02      	cmp	r3, #2
 8001180:	f040 80be 	bne.w	8001300 <main+0x318>
		  float data_scaled = (float)((data_LSB * 200) / 4096);
 8001184:	8bbb      	ldrh	r3, [r7, #28]
 8001186:	22c8      	movs	r2, #200	; 0xc8
 8001188:	fb02 f303 	mul.w	r3, r2, r3
 800118c:	2b00      	cmp	r3, #0
 800118e:	da01      	bge.n	8001194 <main+0x1ac>
 8001190:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001194:	131b      	asrs	r3, r3, #12
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fd62 	bl	8000c60 <__aeabi_i2f>
 800119c:	4603      	mov	r3, r0
 800119e:	61bb      	str	r3, [r7, #24]

		  float r = (float)(50 * sin(data_scaled / 100.0) + 50);
 80011a0:	69b8      	ldr	r0, [r7, #24]
 80011a2:	f7ff f939 	bl	8000418 <__aeabi_f2d>
 80011a6:	f04f 0200 	mov.w	r2, #0
 80011aa:	4b51      	ldr	r3, [pc, #324]	; (80012f0 <main+0x308>)
 80011ac:	f7ff fab6 	bl	800071c <__aeabi_ddiv>
 80011b0:	4603      	mov	r3, r0
 80011b2:	460c      	mov	r4, r1
 80011b4:	4618      	mov	r0, r3
 80011b6:	4621      	mov	r1, r4
 80011b8:	f002 fc02 	bl	80039c0 <sin>
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	4b4c      	ldr	r3, [pc, #304]	; (80012f4 <main+0x30c>)
 80011c2:	f7ff f981 	bl	80004c8 <__aeabi_dmul>
 80011c6:	4603      	mov	r3, r0
 80011c8:	460c      	mov	r4, r1
 80011ca:	4618      	mov	r0, r3
 80011cc:	4621      	mov	r1, r4
 80011ce:	f04f 0200 	mov.w	r2, #0
 80011d2:	4b48      	ldr	r3, [pc, #288]	; (80012f4 <main+0x30c>)
 80011d4:	f7fe ffc2 	bl	800015c <__adddf3>
 80011d8:	4603      	mov	r3, r0
 80011da:	460c      	mov	r4, r1
 80011dc:	4618      	mov	r0, r3
 80011de:	4621      	mov	r1, r4
 80011e0:	f7ff fc34 	bl	8000a4c <__aeabi_d2f>
 80011e4:	4603      	mov	r3, r0
 80011e6:	617b      	str	r3, [r7, #20]
		  float g = (float)(50 * sin(data_scaled / 100.0 - 1 ) + 50);
 80011e8:	69b8      	ldr	r0, [r7, #24]
 80011ea:	f7ff f915 	bl	8000418 <__aeabi_f2d>
 80011ee:	f04f 0200 	mov.w	r2, #0
 80011f2:	4b3f      	ldr	r3, [pc, #252]	; (80012f0 <main+0x308>)
 80011f4:	f7ff fa92 	bl	800071c <__aeabi_ddiv>
 80011f8:	4603      	mov	r3, r0
 80011fa:	460c      	mov	r4, r1
 80011fc:	4618      	mov	r0, r3
 80011fe:	4621      	mov	r1, r4
 8001200:	f04f 0200 	mov.w	r2, #0
 8001204:	4b3c      	ldr	r3, [pc, #240]	; (80012f8 <main+0x310>)
 8001206:	f7fe ffa7 	bl	8000158 <__aeabi_dsub>
 800120a:	4603      	mov	r3, r0
 800120c:	460c      	mov	r4, r1
 800120e:	4618      	mov	r0, r3
 8001210:	4621      	mov	r1, r4
 8001212:	f002 fbd5 	bl	80039c0 <sin>
 8001216:	f04f 0200 	mov.w	r2, #0
 800121a:	4b36      	ldr	r3, [pc, #216]	; (80012f4 <main+0x30c>)
 800121c:	f7ff f954 	bl	80004c8 <__aeabi_dmul>
 8001220:	4603      	mov	r3, r0
 8001222:	460c      	mov	r4, r1
 8001224:	4618      	mov	r0, r3
 8001226:	4621      	mov	r1, r4
 8001228:	f04f 0200 	mov.w	r2, #0
 800122c:	4b31      	ldr	r3, [pc, #196]	; (80012f4 <main+0x30c>)
 800122e:	f7fe ff95 	bl	800015c <__adddf3>
 8001232:	4603      	mov	r3, r0
 8001234:	460c      	mov	r4, r1
 8001236:	4618      	mov	r0, r3
 8001238:	4621      	mov	r1, r4
 800123a:	f7ff fc07 	bl	8000a4c <__aeabi_d2f>
 800123e:	4603      	mov	r3, r0
 8001240:	613b      	str	r3, [r7, #16]
		  float b = (float)(50 * sin(data_scaled / 100.0 - 2 ) + 50);
 8001242:	69b8      	ldr	r0, [r7, #24]
 8001244:	f7ff f8e8 	bl	8000418 <__aeabi_f2d>
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <main+0x308>)
 800124e:	f7ff fa65 	bl	800071c <__aeabi_ddiv>
 8001252:	4603      	mov	r3, r0
 8001254:	460c      	mov	r4, r1
 8001256:	4618      	mov	r0, r3
 8001258:	4621      	mov	r1, r4
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001262:	f7fe ff79 	bl	8000158 <__aeabi_dsub>
 8001266:	4603      	mov	r3, r0
 8001268:	460c      	mov	r4, r1
 800126a:	4618      	mov	r0, r3
 800126c:	4621      	mov	r1, r4
 800126e:	f002 fba7 	bl	80039c0 <sin>
 8001272:	f04f 0200 	mov.w	r2, #0
 8001276:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <main+0x30c>)
 8001278:	f7ff f926 	bl	80004c8 <__aeabi_dmul>
 800127c:	4603      	mov	r3, r0
 800127e:	460c      	mov	r4, r1
 8001280:	4618      	mov	r0, r3
 8001282:	4621      	mov	r1, r4
 8001284:	f04f 0200 	mov.w	r2, #0
 8001288:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <main+0x30c>)
 800128a:	f7fe ff67 	bl	800015c <__adddf3>
 800128e:	4603      	mov	r3, r0
 8001290:	460c      	mov	r4, r1
 8001292:	4618      	mov	r0, r3
 8001294:	4621      	mov	r1, r4
 8001296:	f7ff fbd9 	bl	8000a4c <__aeabi_d2f>
 800129a:	4603      	mov	r3, r0
 800129c:	60fb      	str	r3, [r7, #12]

		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWM_Function_Linear(r));
 800129e:	6978      	ldr	r0, [r7, #20]
 80012a0:	f000 fa0a 	bl	80016b8 <PWM_Function_Linear>
 80012a4:	4602      	mov	r2, r0
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <main+0x314>)
 80012a8:	681c      	ldr	r4, [r3, #0]
 80012aa:	4610      	mov	r0, r2
 80012ac:	f7ff fe7c 	bl	8000fa8 <__aeabi_f2uiz>
 80012b0:	4603      	mov	r3, r0
 80012b2:	6363      	str	r3, [r4, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, PWM_Function_Linear(g));
 80012b4:	6938      	ldr	r0, [r7, #16]
 80012b6:	f000 f9ff 	bl	80016b8 <PWM_Function_Linear>
 80012ba:	4602      	mov	r2, r0
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <main+0x314>)
 80012be:	681c      	ldr	r4, [r3, #0]
 80012c0:	4610      	mov	r0, r2
 80012c2:	f7ff fe71 	bl	8000fa8 <__aeabi_f2uiz>
 80012c6:	4603      	mov	r3, r0
 80012c8:	63a3      	str	r3, [r4, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, PWM_Function_Linear(b));
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	f000 f9f4 	bl	80016b8 <PWM_Function_Linear>
 80012d0:	4602      	mov	r2, r0
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <main+0x314>)
 80012d4:	681c      	ldr	r4, [r3, #0]
 80012d6:	4610      	mov	r0, r2
 80012d8:	f7ff fe66 	bl	8000fa8 <__aeabi_f2uiz>
 80012dc:	4603      	mov	r3, r0
 80012de:	63e3      	str	r3, [r4, #60]	; 0x3c
 80012e0:	e01a      	b.n	8001318 <main+0x330>
 80012e2:	bf00      	nop
 80012e4:	20000100 	.word	0x20000100
 80012e8:	200000d0 	.word	0x200000d0
 80012ec:	40011000 	.word	0x40011000
 80012f0:	40590000 	.word	0x40590000
 80012f4:	40490000 	.word	0x40490000
 80012f8:	3ff00000 	.word	0x3ff00000
 80012fc:	20000090 	.word	0x20000090
	  }
	  else{
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001300:	4b38      	ldr	r3, [pc, #224]	; (80013e4 <main+0x3fc>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2200      	movs	r2, #0
 8001306:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8001308:	4b36      	ldr	r3, [pc, #216]	; (80013e4 <main+0x3fc>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2200      	movs	r2, #0
 800130e:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8001310:	4b34      	ldr	r3, [pc, #208]	; (80013e4 <main+0x3fc>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2200      	movs	r2, #0
 8001316:	63da      	str	r2, [r3, #60]	; 0x3c
	  }

	  if(data_LSB >= 2000) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001318:	8bbb      	ldrh	r3, [r7, #28]
 800131a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800131e:	d304      	bcc.n	800132a <main+0x342>
 8001320:	2201      	movs	r2, #1
 8001322:	2101      	movs	r1, #1
 8001324:	4830      	ldr	r0, [pc, #192]	; (80013e8 <main+0x400>)
 8001326:	f001 fa33 	bl	8002790 <HAL_GPIO_WritePin>
	  if(data_LSB >= 2200) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800132a:	8bbb      	ldrh	r3, [r7, #28]
 800132c:	f640 0297 	movw	r2, #2199	; 0x897
 8001330:	4293      	cmp	r3, r2
 8001332:	d904      	bls.n	800133e <main+0x356>
 8001334:	2201      	movs	r2, #1
 8001336:	2102      	movs	r1, #2
 8001338:	482b      	ldr	r0, [pc, #172]	; (80013e8 <main+0x400>)
 800133a:	f001 fa29 	bl	8002790 <HAL_GPIO_WritePin>
	  if(data_LSB >= 2400) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800133e:	8bbb      	ldrh	r3, [r7, #28]
 8001340:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8001344:	d304      	bcc.n	8001350 <main+0x368>
 8001346:	2201      	movs	r2, #1
 8001348:	2104      	movs	r1, #4
 800134a:	4827      	ldr	r0, [pc, #156]	; (80013e8 <main+0x400>)
 800134c:	f001 fa20 	bl	8002790 <HAL_GPIO_WritePin>
	  if(data_LSB >= 2600) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8001350:	8bbb      	ldrh	r3, [r7, #28]
 8001352:	f640 2227 	movw	r2, #2599	; 0xa27
 8001356:	4293      	cmp	r3, r2
 8001358:	d904      	bls.n	8001364 <main+0x37c>
 800135a:	2201      	movs	r2, #1
 800135c:	2108      	movs	r1, #8
 800135e:	4822      	ldr	r0, [pc, #136]	; (80013e8 <main+0x400>)
 8001360:	f001 fa16 	bl	8002790 <HAL_GPIO_WritePin>
	  if(data_LSB >= 2800) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8001364:	8bbb      	ldrh	r3, [r7, #28]
 8001366:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 800136a:	d304      	bcc.n	8001376 <main+0x38e>
 800136c:	2201      	movs	r2, #1
 800136e:	2110      	movs	r1, #16
 8001370:	481d      	ldr	r0, [pc, #116]	; (80013e8 <main+0x400>)
 8001372:	f001 fa0d 	bl	8002790 <HAL_GPIO_WritePin>
	  if(data_LSB >= 3000) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8001376:	8bbb      	ldrh	r3, [r7, #28]
 8001378:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800137c:	4293      	cmp	r3, r2
 800137e:	d904      	bls.n	800138a <main+0x3a2>
 8001380:	2201      	movs	r2, #1
 8001382:	2120      	movs	r1, #32
 8001384:	4818      	ldr	r0, [pc, #96]	; (80013e8 <main+0x400>)
 8001386:	f001 fa03 	bl	8002790 <HAL_GPIO_WritePin>
	  if(data_LSB >= 3200) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800138a:	8bbb      	ldrh	r3, [r7, #28]
 800138c:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8001390:	d304      	bcc.n	800139c <main+0x3b4>
 8001392:	2201      	movs	r2, #1
 8001394:	2140      	movs	r1, #64	; 0x40
 8001396:	4814      	ldr	r0, [pc, #80]	; (80013e8 <main+0x400>)
 8001398:	f001 f9fa 	bl	8002790 <HAL_GPIO_WritePin>
	  if(data_LSB >= 3400) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800139c:	8bbb      	ldrh	r3, [r7, #28]
 800139e:	f640 5247 	movw	r2, #3399	; 0xd47
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d904      	bls.n	80013b0 <main+0x3c8>
 80013a6:	2201      	movs	r2, #1
 80013a8:	2180      	movs	r1, #128	; 0x80
 80013aa:	480f      	ldr	r0, [pc, #60]	; (80013e8 <main+0x400>)
 80013ac:	f001 f9f0 	bl	8002790 <HAL_GPIO_WritePin>
	  if(data_LSB >= 3600) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80013b0:	8bbb      	ldrh	r3, [r7, #28]
 80013b2:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80013b6:	d305      	bcc.n	80013c4 <main+0x3dc>
 80013b8:	2201      	movs	r2, #1
 80013ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013be:	480a      	ldr	r0, [pc, #40]	; (80013e8 <main+0x400>)
 80013c0:	f001 f9e6 	bl	8002790 <HAL_GPIO_WritePin>
	  if(data_LSB >= 3800) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80013c4:	8bbb      	ldrh	r3, [r7, #28]
 80013c6:	f640 62d7 	movw	r2, #3799	; 0xed7
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d905      	bls.n	80013da <main+0x3f2>
 80013ce:	2201      	movs	r2, #1
 80013d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013d4:	4804      	ldr	r0, [pc, #16]	; (80013e8 <main+0x400>)
 80013d6:	f001 f9db 	bl	8002790 <HAL_GPIO_WritePin>

	  HAL_Delay(20);
 80013da:	2014      	movs	r0, #20
 80013dc:	f000 fb3e 	bl	8001a5c <HAL_Delay>
	  data_LSB = HAL_ADC_GetValue(&hadc1);
 80013e0:	e614      	b.n	800100c <main+0x24>
 80013e2:	bf00      	nop
 80013e4:	20000090 	.word	0x20000090
 80013e8:	40011000 	.word	0x40011000

080013ec <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b094      	sub	sp, #80	; 0x50
 80013f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013f6:	2228      	movs	r2, #40	; 0x28
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f002 fad8 	bl	80039b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800141c:	2302      	movs	r3, #2
 800141e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001420:	2301      	movs	r3, #1
 8001422:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001424:	2310      	movs	r3, #16
 8001426:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001428:	2302      	movs	r3, #2
 800142a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800142c:	2300      	movs	r3, #0
 800142e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001430:	2300      	movs	r3, #0
 8001432:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001434:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001438:	4618      	mov	r0, r3
 800143a:	f001 f9e3 	bl	8002804 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800143e:	230f      	movs	r3, #15
 8001440:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001442:	2302      	movs	r3, #2
 8001444:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800144a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800144e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001450:	2300      	movs	r3, #0
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2100      	movs	r1, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f001 fc52 	bl	8002d04 <HAL_RCC_ClockConfig>

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001460:	2302      	movs	r3, #2
 8001462:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001464:	2300      	movs	r3, #0
 8001466:	60fb      	str	r3, [r7, #12]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	4618      	mov	r0, r3
 800146c:	f001 fdd2 	bl	8003014 <HAL_RCCEx_PeriphCLKConfig>
}
 8001470:	bf00      	nop
 8001472:	3750      	adds	r7, #80	; 0x50
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <MX_ADC1_Init>:


static void MX_ADC1_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0

  ADC_ChannelConfTypeDef sConfig = {0};
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]

  hadc1.Instance = ADC1;
 8001488:	4b18      	ldr	r3, [pc, #96]	; (80014ec <MX_ADC1_Init+0x74>)
 800148a:	4a19      	ldr	r2, [pc, #100]	; (80014f0 <MX_ADC1_Init+0x78>)
 800148c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800148e:	4b17      	ldr	r3, [pc, #92]	; (80014ec <MX_ADC1_Init+0x74>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <MX_ADC1_Init+0x74>)
 8001496:	2201      	movs	r2, #1
 8001498:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800149a:	4b14      	ldr	r3, [pc, #80]	; (80014ec <MX_ADC1_Init+0x74>)
 800149c:	2200      	movs	r2, #0
 800149e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <MX_ADC1_Init+0x74>)
 80014a2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80014a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014a8:	4b10      	ldr	r3, [pc, #64]	; (80014ec <MX_ADC1_Init+0x74>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80014ae:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <MX_ADC1_Init+0x74>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.NbrOfDiscConversion = 1;
 80014b4:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <MX_ADC1_Init+0x74>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	619a      	str	r2, [r3, #24]
  HAL_ADC_Init(&hadc1);
 80014ba:	480c      	ldr	r0, [pc, #48]	; (80014ec <MX_ADC1_Init+0x74>)
 80014bc:	f000 faf0 	bl	8001aa0 <HAL_ADC_Init>

  sConfig.Channel = ADC_CHANNEL_0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014c4:	2301      	movs	r3, #1
 80014c6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	4619      	mov	r1, r3
 80014d0:	4806      	ldr	r0, [pc, #24]	; (80014ec <MX_ADC1_Init+0x74>)
 80014d2:	f000 fd71 	bl	8001fb8 <HAL_ADC_ConfigChannel>

  HAL_ADC_Start(&hadc1);
 80014d6:	4805      	ldr	r0, [pc, #20]	; (80014ec <MX_ADC1_Init+0x74>)
 80014d8:	f000 fbba 	bl	8001c50 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 20);
 80014dc:	2114      	movs	r1, #20
 80014de:	4803      	ldr	r0, [pc, #12]	; (80014ec <MX_ADC1_Init+0x74>)
 80014e0:	f000 fc64 	bl	8001dac <HAL_ADC_PollForConversion>

}
 80014e4:	bf00      	nop
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	200000d0 	.word	0x200000d0
 80014f0:	40012400 	.word	0x40012400

080014f4 <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b088      	sub	sp, #32
 80014f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fa:	f107 0310 	add.w	r3, r7, #16
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001508:	4b32      	ldr	r3, [pc, #200]	; (80015d4 <MX_GPIO_Init+0xe0>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	4a31      	ldr	r2, [pc, #196]	; (80015d4 <MX_GPIO_Init+0xe0>)
 800150e:	f043 0310 	orr.w	r3, r3, #16
 8001512:	6193      	str	r3, [r2, #24]
 8001514:	4b2f      	ldr	r3, [pc, #188]	; (80015d4 <MX_GPIO_Init+0xe0>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	f003 0310 	and.w	r3, r3, #16
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001520:	4b2c      	ldr	r3, [pc, #176]	; (80015d4 <MX_GPIO_Init+0xe0>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	4a2b      	ldr	r2, [pc, #172]	; (80015d4 <MX_GPIO_Init+0xe0>)
 8001526:	f043 0304 	orr.w	r3, r3, #4
 800152a:	6193      	str	r3, [r2, #24]
 800152c:	4b29      	ldr	r3, [pc, #164]	; (80015d4 <MX_GPIO_Init+0xe0>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001538:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <MX_GPIO_Init+0xe0>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	4a25      	ldr	r2, [pc, #148]	; (80015d4 <MX_GPIO_Init+0xe0>)
 800153e:	f043 0308 	orr.w	r3, r3, #8
 8001542:	6193      	str	r3, [r2, #24]
 8001544:	4b23      	ldr	r3, [pc, #140]	; (80015d4 <MX_GPIO_Init+0xe0>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	f003 0308 	and.w	r3, r3, #8
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|
 8001550:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001554:	613b      	str	r3, [r7, #16]
      		 GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001556:	2301      	movs	r3, #1
 8001558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2302      	movs	r3, #2
 8001560:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001562:	f107 0310 	add.w	r3, r7, #16
 8001566:	4619      	mov	r1, r3
 8001568:	481b      	ldr	r0, [pc, #108]	; (80015d8 <MX_GPIO_Init+0xe4>)
 800156a:	f000 ffb7 	bl	80024dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800156e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001572:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	2302      	movs	r3, #2
 8001576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800157c:	2303      	movs	r3, #3
 800157e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001580:	f107 0310 	add.w	r3, r7, #16
 8001584:	4619      	mov	r1, r3
 8001586:	4815      	ldr	r0, [pc, #84]	; (80015dc <MX_GPIO_Init+0xe8>)
 8001588:	f000 ffa8 	bl	80024dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800158c:	2301      	movs	r3, #1
 800158e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001590:	2303      	movs	r3, #3
 8001592:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001594:	f107 0310 	add.w	r3, r7, #16
 8001598:	4619      	mov	r1, r3
 800159a:	4811      	ldr	r0, [pc, #68]	; (80015e0 <MX_GPIO_Init+0xec>)
 800159c:	f000 ff9e 	bl	80024dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015a6:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <MX_GPIO_Init+0xf0>)
 80015a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015aa:	2301      	movs	r3, #1
 80015ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ae:	f107 0310 	add.w	r3, r7, #16
 80015b2:	4619      	mov	r1, r3
 80015b4:	4808      	ldr	r0, [pc, #32]	; (80015d8 <MX_GPIO_Init+0xe4>)
 80015b6:	f000 ff91 	bl	80024dc <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2100      	movs	r1, #0
 80015be:	2028      	movs	r0, #40	; 0x28
 80015c0:	f000 ff55 	bl	800246e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015c4:	2028      	movs	r0, #40	; 0x28
 80015c6:	f000 ff6e 	bl	80024a6 <HAL_NVIC_EnableIRQ>

}
 80015ca:	bf00      	nop
 80015cc:	3720      	adds	r7, #32
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40011000 	.word	0x40011000
 80015dc:	40010c00 	.word	0x40010c00
 80015e0:	40010800 	.word	0x40010800
 80015e4:	10110000 	.word	0x10110000

080015e8 <MX_TIM4_Init>:


static void MX_TIM4_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
 80015fc:	615a      	str	r2, [r3, #20]
 80015fe:	619a      	str	r2, [r3, #24]

  __HAL_RCC_TIM4_CLK_ENABLE();
 8001600:	4b2a      	ldr	r3, [pc, #168]	; (80016ac <MX_TIM4_Init+0xc4>)
 8001602:	69db      	ldr	r3, [r3, #28]
 8001604:	4a29      	ldr	r2, [pc, #164]	; (80016ac <MX_TIM4_Init+0xc4>)
 8001606:	f043 0304 	orr.w	r3, r3, #4
 800160a:	61d3      	str	r3, [r2, #28]
 800160c:	4b27      	ldr	r3, [pc, #156]	; (80016ac <MX_TIM4_Init+0xc4>)
 800160e:	69db      	ldr	r3, [r3, #28]
 8001610:	f003 0304 	and.w	r3, r3, #4
 8001614:	603b      	str	r3, [r7, #0]
 8001616:	683b      	ldr	r3, [r7, #0]
  htim4.Instance = TIM4;
 8001618:	4b25      	ldr	r3, [pc, #148]	; (80016b0 <MX_TIM4_Init+0xc8>)
 800161a:	4a26      	ldr	r2, [pc, #152]	; (80016b4 <MX_TIM4_Init+0xcc>)
 800161c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8 - 1;
 800161e:	4b24      	ldr	r3, [pc, #144]	; (80016b0 <MX_TIM4_Init+0xc8>)
 8001620:	2207      	movs	r2, #7
 8001622:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001624:	4b22      	ldr	r3, [pc, #136]	; (80016b0 <MX_TIM4_Init+0xc8>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000 - 1;
 800162a:	4b21      	ldr	r3, [pc, #132]	; (80016b0 <MX_TIM4_Init+0xc8>)
 800162c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001630:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = 0;
 8001632:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <MX_TIM4_Init+0xc8>)
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
  htim4.Init.RepetitionCounter = 0;
 8001638:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <MX_TIM4_Init+0xc8>)
 800163a:	2200      	movs	r2, #0
 800163c:	615a      	str	r2, [r3, #20]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800163e:	4b1c      	ldr	r3, [pc, #112]	; (80016b0 <MX_TIM4_Init+0xc8>)
 8001640:	2280      	movs	r2, #128	; 0x80
 8001642:	619a      	str	r2, [r3, #24]
  HAL_TIM_PWM_Init(&htim4);
 8001644:	481a      	ldr	r0, [pc, #104]	; (80016b0 <MX_TIM4_Init+0xc8>)
 8001646:	f001 fe57 	bl	80032f8 <HAL_TIM_PWM_Init>

  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800164a:	2370      	movs	r3, #112	; 0x70
 800164c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 800164e:	2364      	movs	r3, #100	; 0x64
 8001650:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001656:	2308      	movs	r3, #8
 8001658:	613b      	str	r3, [r7, #16]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800165a:	2304      	movs	r3, #4
 800165c:	617b      	str	r3, [r7, #20]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 800165e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001662:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001664:	2300      	movs	r3, #0
 8001666:	61fb      	str	r3, [r7, #28]
  HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1);
 8001668:	1d3b      	adds	r3, r7, #4
 800166a:	2200      	movs	r2, #0
 800166c:	4619      	mov	r1, r3
 800166e:	4810      	ldr	r0, [pc, #64]	; (80016b0 <MX_TIM4_Init+0xc8>)
 8001670:	f001 fea0 	bl	80033b4 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2);
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	2204      	movs	r2, #4
 8001678:	4619      	mov	r1, r3
 800167a:	480d      	ldr	r0, [pc, #52]	; (80016b0 <MX_TIM4_Init+0xc8>)
 800167c:	f001 fe9a 	bl	80033b4 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3);
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	2208      	movs	r2, #8
 8001684:	4619      	mov	r1, r3
 8001686:	480a      	ldr	r0, [pc, #40]	; (80016b0 <MX_TIM4_Init+0xc8>)
 8001688:	f001 fe94 	bl	80033b4 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800168c:	2100      	movs	r1, #0
 800168e:	4808      	ldr	r0, [pc, #32]	; (80016b0 <MX_TIM4_Init+0xc8>)
 8001690:	f001 fe5e 	bl	8003350 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001694:	2104      	movs	r1, #4
 8001696:	4806      	ldr	r0, [pc, #24]	; (80016b0 <MX_TIM4_Init+0xc8>)
 8001698:	f001 fe5a 	bl	8003350 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800169c:	2108      	movs	r1, #8
 800169e:	4804      	ldr	r0, [pc, #16]	; (80016b0 <MX_TIM4_Init+0xc8>)
 80016a0:	f001 fe56 	bl	8003350 <HAL_TIM_PWM_Start>

}
 80016a4:	bf00      	nop
 80016a6:	3720      	adds	r7, #32
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40021000 	.word	0x40021000
 80016b0:	20000090 	.word	0x20000090
 80016b4:	40000800 	.word	0x40000800

080016b8 <PWM_Function_Linear>:


float PWM_Function_Linear(float val)
{
 80016b8:	b590      	push	{r4, r7, lr}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 const float k = (float)0.1;
 80016c0:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <PWM_Function_Linear+0x78>)
 80016c2:	60fb      	str	r3, [r7, #12]
 const float x0 = (float)60.0;
 80016c4:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <PWM_Function_Linear+0x7c>)
 80016c6:	60bb      	str	r3, [r7, #8]
 return (float)(300.0 / (1.0 + exp(-k * (val - x0))));
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80016ce:	68b9      	ldr	r1, [r7, #8]
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff fa0f 	bl	8000af4 <__aeabi_fsub>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4619      	mov	r1, r3
 80016da:	4620      	mov	r0, r4
 80016dc:	f7ff fb14 	bl	8000d08 <__aeabi_fmul>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7fe fe98 	bl	8000418 <__aeabi_f2d>
 80016e8:	4603      	mov	r3, r0
 80016ea:	460c      	mov	r4, r1
 80016ec:	4618      	mov	r0, r3
 80016ee:	4621      	mov	r1, r4
 80016f0:	f002 f9a2 	bl	8003a38 <exp>
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <PWM_Function_Linear+0x80>)
 80016fa:	f7fe fd2f 	bl	800015c <__adddf3>
 80016fe:	4603      	mov	r3, r0
 8001700:	460c      	mov	r4, r1
 8001702:	461a      	mov	r2, r3
 8001704:	4623      	mov	r3, r4
 8001706:	a108      	add	r1, pc, #32	; (adr r1, 8001728 <PWM_Function_Linear+0x70>)
 8001708:	e9d1 0100 	ldrd	r0, r1, [r1]
 800170c:	f7ff f806 	bl	800071c <__aeabi_ddiv>
 8001710:	4603      	mov	r3, r0
 8001712:	460c      	mov	r4, r1
 8001714:	4618      	mov	r0, r3
 8001716:	4621      	mov	r1, r4
 8001718:	f7ff f998 	bl	8000a4c <__aeabi_d2f>
 800171c:	4603      	mov	r3, r0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	bd90      	pop	{r4, r7, pc}
 8001726:	bf00      	nop
 8001728:	00000000 	.word	0x00000000
 800172c:	4072c000 	.word	0x4072c000
 8001730:	3dcccccd 	.word	0x3dcccccd
 8001734:	42700000 	.word	0x42700000
 8001738:	3ff00000 	.word	0x3ff00000

0800173c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <HAL_MspInit+0x5c>)
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	4a14      	ldr	r2, [pc, #80]	; (8001798 <HAL_MspInit+0x5c>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6193      	str	r3, [r2, #24]
 800174e:	4b12      	ldr	r3, [pc, #72]	; (8001798 <HAL_MspInit+0x5c>)
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800175a:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <HAL_MspInit+0x5c>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	4a0e      	ldr	r2, [pc, #56]	; (8001798 <HAL_MspInit+0x5c>)
 8001760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001764:	61d3      	str	r3, [r2, #28]
 8001766:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <HAL_MspInit+0x5c>)
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001772:	4b0a      	ldr	r3, [pc, #40]	; (800179c <HAL_MspInit+0x60>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	4a04      	ldr	r2, [pc, #16]	; (800179c <HAL_MspInit+0x60>)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800178e:	bf00      	nop
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr
 8001798:	40021000 	.word	0x40021000
 800179c:	40010000 	.word	0x40010000

080017a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b088      	sub	sp, #32
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a8:	f107 0310 	add.w	r3, r7, #16
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a14      	ldr	r2, [pc, #80]	; (800180c <HAL_ADC_MspInit+0x6c>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d121      	bne.n	8001804 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017c0:	4b13      	ldr	r3, [pc, #76]	; (8001810 <HAL_ADC_MspInit+0x70>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	4a12      	ldr	r2, [pc, #72]	; (8001810 <HAL_ADC_MspInit+0x70>)
 80017c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ca:	6193      	str	r3, [r2, #24]
 80017cc:	4b10      	ldr	r3, [pc, #64]	; (8001810 <HAL_ADC_MspInit+0x70>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d8:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <HAL_ADC_MspInit+0x70>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	4a0c      	ldr	r2, [pc, #48]	; (8001810 <HAL_ADC_MspInit+0x70>)
 80017de:	f043 0304 	orr.w	r3, r3, #4
 80017e2:	6193      	str	r3, [r2, #24]
 80017e4:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <HAL_ADC_MspInit+0x70>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017f0:	2302      	movs	r3, #2
 80017f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017f4:	2303      	movs	r3, #3
 80017f6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f8:	f107 0310 	add.w	r3, r7, #16
 80017fc:	4619      	mov	r1, r3
 80017fe:	4805      	ldr	r0, [pc, #20]	; (8001814 <HAL_ADC_MspInit+0x74>)
 8001800:	f000 fe6c 	bl	80024dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001804:	bf00      	nop
 8001806:	3720      	adds	r7, #32
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40012400 	.word	0x40012400
 8001810:	40021000 	.word	0x40021000
 8001814:	40010800 	.word	0x40010800

08001818 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a09      	ldr	r2, [pc, #36]	; (800184c <HAL_TIM_PWM_MspInit+0x34>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d10b      	bne.n	8001842 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800182a:	4b09      	ldr	r3, [pc, #36]	; (8001850 <HAL_TIM_PWM_MspInit+0x38>)
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	4a08      	ldr	r2, [pc, #32]	; (8001850 <HAL_TIM_PWM_MspInit+0x38>)
 8001830:	f043 0304 	orr.w	r3, r3, #4
 8001834:	61d3      	str	r3, [r2, #28]
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <HAL_TIM_PWM_MspInit+0x38>)
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	f003 0304 	and.w	r3, r3, #4
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001842:	bf00      	nop
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr
 800184c:	40000800 	.word	0x40000800
 8001850:	40021000 	.word	0x40021000

08001854 <NMI_Handler>:
#include "stm32f1xx_it.h"

extern mode;

void NMI_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0

}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr

08001860 <HardFault_Handler>:


void HardFault_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0

  while (1)
 8001864:	e7fe      	b.n	8001864 <HardFault_Handler+0x4>

08001866 <MemManage_Handler>:
  }
}


void MemManage_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0

  while (1)
 800186a:	e7fe      	b.n	800186a <MemManage_Handler+0x4>

0800186c <BusFault_Handler>:
  }
}


void BusFault_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  while (1)
 8001870:	e7fe      	b.n	8001870 <BusFault_Handler+0x4>

08001872 <UsageFault_Handler>:
  }
}


void UsageFault_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0

  while (1)
 8001876:	e7fe      	b.n	8001876 <UsageFault_Handler+0x4>

08001878 <SVC_Handler>:
  }
}


void SVC_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0

}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr

08001884 <DebugMon_Handler>:


void DebugMon_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0

}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr

08001890 <PendSV_Handler>:


void PendSV_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0

}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr

0800189c <SysTick_Handler>:


void SysTick_Handler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0

  HAL_IncTick();
 80018a0:	f000 f8c0 	bl	8001a24 <HAL_IncTick>

}
 80018a4:	bf00      	nop
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0

  if(mode == 0) mode = 1;
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <EXTI15_10_IRQHandler+0x38>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d103      	bne.n	80018bc <EXTI15_10_IRQHandler+0x14>
 80018b4:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <EXTI15_10_IRQHandler+0x38>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	e00a      	b.n	80018d2 <EXTI15_10_IRQHandler+0x2a>
  else if(mode == 1) mode = 2;
 80018bc:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <EXTI15_10_IRQHandler+0x38>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d103      	bne.n	80018cc <EXTI15_10_IRQHandler+0x24>
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <EXTI15_10_IRQHandler+0x38>)
 80018c6:	2202      	movs	r2, #2
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	e002      	b.n	80018d2 <EXTI15_10_IRQHandler+0x2a>
  else mode = 0;
 80018cc:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <EXTI15_10_IRQHandler+0x38>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80018d2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018d6:	f000 ff73 	bl	80027c0 <HAL_GPIO_EXTI_IRQHandler>

}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000100 	.word	0x20000100

080018e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80018e8:	4b15      	ldr	r3, [pc, #84]	; (8001940 <SystemInit+0x5c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a14      	ldr	r2, [pc, #80]	; (8001940 <SystemInit+0x5c>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80018f4:	4b12      	ldr	r3, [pc, #72]	; (8001940 <SystemInit+0x5c>)
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	4911      	ldr	r1, [pc, #68]	; (8001940 <SystemInit+0x5c>)
 80018fa:	4b12      	ldr	r3, [pc, #72]	; (8001944 <SystemInit+0x60>)
 80018fc:	4013      	ands	r3, r2
 80018fe:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001900:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <SystemInit+0x5c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a0e      	ldr	r2, [pc, #56]	; (8001940 <SystemInit+0x5c>)
 8001906:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800190a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800190e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001910:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <SystemInit+0x5c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <SystemInit+0x5c>)
 8001916:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800191a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <SystemInit+0x5c>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	4a07      	ldr	r2, [pc, #28]	; (8001940 <SystemInit+0x5c>)
 8001922:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001926:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <SystemInit+0x5c>)
 800192a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800192e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <SystemInit+0x64>)
 8001932:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001936:	609a      	str	r2, [r3, #8]
#endif 
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr
 8001940:	40021000 	.word	0x40021000
 8001944:	f8ff0000 	.word	0xf8ff0000
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800194c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800194e:	e003      	b.n	8001958 <LoopCopyDataInit>

08001950 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001950:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001952:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001954:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001956:	3104      	adds	r1, #4

08001958 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001958:	480a      	ldr	r0, [pc, #40]	; (8001984 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800195a:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800195c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800195e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001960:	d3f6      	bcc.n	8001950 <CopyDataInit>
  ldr r2, =_sbss
 8001962:	4a0a      	ldr	r2, [pc, #40]	; (800198c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001964:	e002      	b.n	800196c <LoopFillZerobss>

08001966 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001966:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001968:	f842 3b04 	str.w	r3, [r2], #4

0800196c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800196c:	4b08      	ldr	r3, [pc, #32]	; (8001990 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800196e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001970:	d3f9      	bcc.n	8001966 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001972:	f7ff ffb7 	bl	80018e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001976:	f001 fff7 	bl	8003968 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800197a:	f7ff fb35 	bl	8000fe8 <main>
  bx lr
 800197e:	4770      	bx	lr
  ldr r3, =_sidata
 8001980:	08004fd8 	.word	0x08004fd8
  ldr r0, =_sdata
 8001984:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001988:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 800198c:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8001990:	20000148 	.word	0x20000148

08001994 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001994:	e7fe      	b.n	8001994 <ADC1_2_IRQHandler>
	...

08001998 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800199c:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <HAL_Init+0x28>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a07      	ldr	r2, [pc, #28]	; (80019c0 <HAL_Init+0x28>)
 80019a2:	f043 0310 	orr.w	r3, r3, #16
 80019a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a8:	2003      	movs	r0, #3
 80019aa:	f000 fd55 	bl	8002458 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ae:	2000      	movs	r0, #0
 80019b0:	f000 f808 	bl	80019c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b4:	f7ff fec2 	bl	800173c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40022000 	.word	0x40022000

080019c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019cc:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_InitTick+0x54>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <HAL_InitTick+0x58>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	4619      	mov	r1, r3
 80019d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019da:	fbb3 f3f1 	udiv	r3, r3, r1
 80019de:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 fd6d 	bl	80024c2 <HAL_SYSTICK_Config>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e00e      	b.n	8001a10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b0f      	cmp	r3, #15
 80019f6:	d80a      	bhi.n	8001a0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f8:	2200      	movs	r2, #0
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001a00:	f000 fd35 	bl	800246e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a04:	4a06      	ldr	r2, [pc, #24]	; (8001a20 <HAL_InitTick+0x5c>)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	e000      	b.n	8001a10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	20000008 	.word	0x20000008
 8001a20:	20000004 	.word	0x20000004

08001a24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <HAL_IncTick+0x1c>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <HAL_IncTick+0x20>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4413      	add	r3, r2
 8001a34:	4a03      	ldr	r2, [pc, #12]	; (8001a44 <HAL_IncTick+0x20>)
 8001a36:	6013      	str	r3, [r2, #0]
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr
 8001a40:	20000008 	.word	0x20000008
 8001a44:	20000144 	.word	0x20000144

08001a48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a4c:	4b02      	ldr	r3, [pc, #8]	; (8001a58 <HAL_GetTick+0x10>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr
 8001a58:	20000144 	.word	0x20000144

08001a5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a64:	f7ff fff0 	bl	8001a48 <HAL_GetTick>
 8001a68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a74:	d005      	beq.n	8001a82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a76:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <HAL_Delay+0x40>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4413      	add	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a82:	bf00      	nop
 8001a84:	f7ff ffe0 	bl	8001a48 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d8f7      	bhi.n	8001a84 <HAL_Delay+0x28>
  {
  }
}
 8001a94:	bf00      	nop
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20000008 	.word	0x20000008

08001aa0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e0be      	b.n	8001c40 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d109      	bne.n	8001ae4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff fe5e 	bl	80017a0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 fbb1 	bl	800224c <ADC_ConversionStop_Disable>
 8001aea:	4603      	mov	r3, r0
 8001aec:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af2:	f003 0310 	and.w	r3, r3, #16
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f040 8099 	bne.w	8001c2e <HAL_ADC_Init+0x18e>
 8001afc:	7dfb      	ldrb	r3, [r7, #23]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f040 8095 	bne.w	8001c2e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b08:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b0c:	f023 0302 	bic.w	r3, r3, #2
 8001b10:	f043 0202 	orr.w	r2, r3, #2
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b20:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	7b1b      	ldrb	r3, [r3, #12]
 8001b26:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b28:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b2a:	68ba      	ldr	r2, [r7, #8]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b38:	d003      	beq.n	8001b42 <HAL_ADC_Init+0xa2>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d102      	bne.n	8001b48 <HAL_ADC_Init+0xa8>
 8001b42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b46:	e000      	b.n	8001b4a <HAL_ADC_Init+0xaa>
 8001b48:	2300      	movs	r3, #0
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	7d1b      	ldrb	r3, [r3, #20]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d119      	bne.n	8001b8c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	7b1b      	ldrb	r3, [r3, #12]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d109      	bne.n	8001b74 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	3b01      	subs	r3, #1
 8001b66:	035a      	lsls	r2, r3, #13
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	e00b      	b.n	8001b8c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b78:	f043 0220 	orr.w	r2, r3, #32
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b84:	f043 0201 	orr.w	r2, r3, #1
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	689a      	ldr	r2, [r3, #8]
 8001ba6:	4b28      	ldr	r3, [pc, #160]	; (8001c48 <HAL_ADC_Init+0x1a8>)
 8001ba8:	4013      	ands	r3, r2
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	6812      	ldr	r2, [r2, #0]
 8001bae:	68b9      	ldr	r1, [r7, #8]
 8001bb0:	430b      	orrs	r3, r1
 8001bb2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bbc:	d003      	beq.n	8001bc6 <HAL_ADC_Init+0x126>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d104      	bne.n	8001bd0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	051b      	lsls	r3, r3, #20
 8001bce:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <HAL_ADC_Init+0x1ac>)
 8001bec:	4013      	ands	r3, r2
 8001bee:	68ba      	ldr	r2, [r7, #8]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d10b      	bne.n	8001c0c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfe:	f023 0303 	bic.w	r3, r3, #3
 8001c02:	f043 0201 	orr.w	r2, r3, #1
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c0a:	e018      	b.n	8001c3e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c10:	f023 0312 	bic.w	r3, r3, #18
 8001c14:	f043 0210 	orr.w	r2, r3, #16
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c20:	f043 0201 	orr.w	r2, r3, #1
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c2c:	e007      	b.n	8001c3e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c32:	f043 0210 	orr.w	r2, r3, #16
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	ffe1f7fd 	.word	0xffe1f7fd
 8001c4c:	ff1f0efe 	.word	0xff1f0efe

08001c50 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d101      	bne.n	8001c6a <HAL_ADC_Start+0x1a>
 8001c66:	2302      	movs	r3, #2
 8001c68:	e098      	b.n	8001d9c <HAL_ADC_Start+0x14c>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 fa98 	bl	80021a8 <ADC_Enable>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f040 8087 	bne.w	8001d92 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c8c:	f023 0301 	bic.w	r3, r3, #1
 8001c90:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a41      	ldr	r2, [pc, #260]	; (8001da4 <HAL_ADC_Start+0x154>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d105      	bne.n	8001cae <HAL_ADC_Start+0x5e>
 8001ca2:	4b41      	ldr	r3, [pc, #260]	; (8001da8 <HAL_ADC_Start+0x158>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d115      	bne.n	8001cda <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d026      	beq.n	8001d16 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ccc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cd0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cd8:	e01d      	b.n	8001d16 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cde:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a2f      	ldr	r2, [pc, #188]	; (8001da8 <HAL_ADC_Start+0x158>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d004      	beq.n	8001cfa <HAL_ADC_Start+0xaa>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a2b      	ldr	r2, [pc, #172]	; (8001da4 <HAL_ADC_Start+0x154>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d10d      	bne.n	8001d16 <HAL_ADC_Start+0xc6>
 8001cfa:	4b2b      	ldr	r3, [pc, #172]	; (8001da8 <HAL_ADC_Start+0x158>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d007      	beq.n	8001d16 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d0e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d006      	beq.n	8001d30 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d26:	f023 0206 	bic.w	r2, r3, #6
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d2e:	e002      	b.n	8001d36 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f06f 0202 	mvn.w	r2, #2
 8001d46:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001d52:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d56:	d113      	bne.n	8001d80 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d5c:	4a11      	ldr	r2, [pc, #68]	; (8001da4 <HAL_ADC_Start+0x154>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d105      	bne.n	8001d6e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001d62:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <HAL_ADC_Start+0x158>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d108      	bne.n	8001d80 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001d7c:	609a      	str	r2, [r3, #8]
 8001d7e:	e00c      	b.n	8001d9a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	e003      	b.n	8001d9a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40012800 	.word	0x40012800
 8001da8:	40012400 	.word	0x40012400

08001dac <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001dac:	b590      	push	{r4, r7, lr}
 8001dae:	b087      	sub	sp, #28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001dc2:	f7ff fe41 	bl	8001a48 <HAL_GetTick>
 8001dc6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00b      	beq.n	8001dee <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dda:	f043 0220 	orr.w	r2, r3, #32
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e0c8      	b.n	8001f80 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d12a      	bne.n	8001e52 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e02:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d123      	bne.n	8001e52 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001e0a:	e01a      	b.n	8001e42 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e12:	d016      	beq.n	8001e42 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d007      	beq.n	8001e2a <HAL_ADC_PollForConversion+0x7e>
 8001e1a:	f7ff fe15 	bl	8001a48 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d20b      	bcs.n	8001e42 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2e:	f043 0204 	orr.w	r2, r3, #4
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e09e      	b.n	8001f80 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0dd      	beq.n	8001e0c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001e50:	e06c      	b.n	8001f2c <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001e52:	4b4d      	ldr	r3, [pc, #308]	; (8001f88 <HAL_ADC_PollForConversion+0x1dc>)
 8001e54:	681c      	ldr	r4, [r3, #0]
 8001e56:	2002      	movs	r0, #2
 8001e58:	f001 f992 	bl	8003180 <HAL_RCCEx_GetPeriphCLKFreq>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6919      	ldr	r1, [r3, #16]
 8001e68:	4b48      	ldr	r3, [pc, #288]	; (8001f8c <HAL_ADC_PollForConversion+0x1e0>)
 8001e6a:	400b      	ands	r3, r1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d118      	bne.n	8001ea2 <HAL_ADC_PollForConversion+0xf6>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68d9      	ldr	r1, [r3, #12]
 8001e76:	4b46      	ldr	r3, [pc, #280]	; (8001f90 <HAL_ADC_PollForConversion+0x1e4>)
 8001e78:	400b      	ands	r3, r1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d111      	bne.n	8001ea2 <HAL_ADC_PollForConversion+0xf6>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6919      	ldr	r1, [r3, #16]
 8001e84:	4b43      	ldr	r3, [pc, #268]	; (8001f94 <HAL_ADC_PollForConversion+0x1e8>)
 8001e86:	400b      	ands	r3, r1
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d108      	bne.n	8001e9e <HAL_ADC_PollForConversion+0xf2>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68d9      	ldr	r1, [r3, #12]
 8001e92:	4b41      	ldr	r3, [pc, #260]	; (8001f98 <HAL_ADC_PollForConversion+0x1ec>)
 8001e94:	400b      	ands	r3, r1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_ADC_PollForConversion+0xf2>
 8001e9a:	2314      	movs	r3, #20
 8001e9c:	e020      	b.n	8001ee0 <HAL_ADC_PollForConversion+0x134>
 8001e9e:	2329      	movs	r3, #41	; 0x29
 8001ea0:	e01e      	b.n	8001ee0 <HAL_ADC_PollForConversion+0x134>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6919      	ldr	r1, [r3, #16]
 8001ea8:	4b3a      	ldr	r3, [pc, #232]	; (8001f94 <HAL_ADC_PollForConversion+0x1e8>)
 8001eaa:	400b      	ands	r3, r1
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d106      	bne.n	8001ebe <HAL_ADC_PollForConversion+0x112>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68d9      	ldr	r1, [r3, #12]
 8001eb6:	4b38      	ldr	r3, [pc, #224]	; (8001f98 <HAL_ADC_PollForConversion+0x1ec>)
 8001eb8:	400b      	ands	r3, r1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00d      	beq.n	8001eda <HAL_ADC_PollForConversion+0x12e>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6919      	ldr	r1, [r3, #16]
 8001ec4:	4b35      	ldr	r3, [pc, #212]	; (8001f9c <HAL_ADC_PollForConversion+0x1f0>)
 8001ec6:	400b      	ands	r3, r1
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d108      	bne.n	8001ede <HAL_ADC_PollForConversion+0x132>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68d9      	ldr	r1, [r3, #12]
 8001ed2:	4b32      	ldr	r3, [pc, #200]	; (8001f9c <HAL_ADC_PollForConversion+0x1f0>)
 8001ed4:	400b      	ands	r3, r1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_ADC_PollForConversion+0x132>
 8001eda:	2354      	movs	r3, #84	; 0x54
 8001edc:	e000      	b.n	8001ee0 <HAL_ADC_PollForConversion+0x134>
 8001ede:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001ee0:	fb02 f303 	mul.w	r3, r2, r3
 8001ee4:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001ee6:	e01d      	b.n	8001f24 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eee:	d016      	beq.n	8001f1e <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d007      	beq.n	8001f06 <HAL_ADC_PollForConversion+0x15a>
 8001ef6:	f7ff fda7 	bl	8001a48 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d20b      	bcs.n	8001f1e <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0a:	f043 0204 	orr.w	r2, r3, #4
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e030      	b.n	8001f80 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	3301      	adds	r3, #1
 8001f22:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d8dd      	bhi.n	8001ee8 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0212 	mvn.w	r2, #18
 8001f34:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001f4c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f50:	d115      	bne.n	8001f7e <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d111      	bne.n	8001f7e <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d105      	bne.n	8001f7e <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f76:	f043 0201 	orr.w	r2, r3, #1
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	371c      	adds	r7, #28
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd90      	pop	{r4, r7, pc}
 8001f88:	20000000 	.word	0x20000000
 8001f8c:	24924924 	.word	0x24924924
 8001f90:	00924924 	.word	0x00924924
 8001f94:	12492492 	.word	0x12492492
 8001f98:	00492492 	.word	0x00492492
 8001f9c:	00249249 	.word	0x00249249

08001fa0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d101      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x20>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	e0dc      	b.n	8002192 <HAL_ADC_ConfigChannel+0x1da>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b06      	cmp	r3, #6
 8001fe6:	d81c      	bhi.n	8002022 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	3b05      	subs	r3, #5
 8001ffa:	221f      	movs	r2, #31
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	4019      	ands	r1, r3
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	6818      	ldr	r0, [r3, #0]
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	4613      	mov	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	3b05      	subs	r3, #5
 8002014:	fa00 f203 	lsl.w	r2, r0, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	430a      	orrs	r2, r1
 800201e:	635a      	str	r2, [r3, #52]	; 0x34
 8002020:	e03c      	b.n	800209c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b0c      	cmp	r3, #12
 8002028:	d81c      	bhi.n	8002064 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	3b23      	subs	r3, #35	; 0x23
 800203c:	221f      	movs	r2, #31
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	4019      	ands	r1, r3
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	6818      	ldr	r0, [r3, #0]
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	4613      	mov	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4413      	add	r3, r2
 8002054:	3b23      	subs	r3, #35	; 0x23
 8002056:	fa00 f203 	lsl.w	r2, r0, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	631a      	str	r2, [r3, #48]	; 0x30
 8002062:	e01b      	b.n	800209c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	3b41      	subs	r3, #65	; 0x41
 8002076:	221f      	movs	r2, #31
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	4019      	ands	r1, r3
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	6818      	ldr	r0, [r3, #0]
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	4613      	mov	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	3b41      	subs	r3, #65	; 0x41
 8002090:	fa00 f203 	lsl.w	r2, r0, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2b09      	cmp	r3, #9
 80020a2:	d91c      	bls.n	80020de <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68d9      	ldr	r1, [r3, #12]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	4613      	mov	r3, r2
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	4413      	add	r3, r2
 80020b4:	3b1e      	subs	r3, #30
 80020b6:	2207      	movs	r2, #7
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	4019      	ands	r1, r3
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	6898      	ldr	r0, [r3, #8]
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	4613      	mov	r3, r2
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	4413      	add	r3, r2
 80020ce:	3b1e      	subs	r3, #30
 80020d0:	fa00 f203 	lsl.w	r2, r0, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	60da      	str	r2, [r3, #12]
 80020dc:	e019      	b.n	8002112 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6919      	ldr	r1, [r3, #16]
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	4613      	mov	r3, r2
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4413      	add	r3, r2
 80020ee:	2207      	movs	r2, #7
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	4019      	ands	r1, r3
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	6898      	ldr	r0, [r3, #8]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4613      	mov	r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	4413      	add	r3, r2
 8002106:	fa00 f203 	lsl.w	r2, r0, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2b10      	cmp	r3, #16
 8002118:	d003      	beq.n	8002122 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800211e:	2b11      	cmp	r3, #17
 8002120:	d132      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a1d      	ldr	r2, [pc, #116]	; (800219c <HAL_ADC_ConfigChannel+0x1e4>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d125      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d126      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002148:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2b10      	cmp	r3, #16
 8002150:	d11a      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002152:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a13      	ldr	r2, [pc, #76]	; (80021a4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002158:	fba2 2303 	umull	r2, r3, r2, r3
 800215c:	0c9a      	lsrs	r2, r3, #18
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002168:	e002      	b.n	8002170 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	3b01      	subs	r3, #1
 800216e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f9      	bne.n	800216a <HAL_ADC_ConfigChannel+0x1b2>
 8002176:	e007      	b.n	8002188 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217c:	f043 0220 	orr.w	r2, r3, #32
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002190:	7bfb      	ldrb	r3, [r7, #15]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr
 800219c:	40012400 	.word	0x40012400
 80021a0:	20000000 	.word	0x20000000
 80021a4:	431bde83 	.word	0x431bde83

080021a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d039      	beq.n	800223a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f042 0201 	orr.w	r2, r2, #1
 80021d4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021d6:	4b1b      	ldr	r3, [pc, #108]	; (8002244 <ADC_Enable+0x9c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a1b      	ldr	r2, [pc, #108]	; (8002248 <ADC_Enable+0xa0>)
 80021dc:	fba2 2303 	umull	r2, r3, r2, r3
 80021e0:	0c9b      	lsrs	r3, r3, #18
 80021e2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80021e4:	e002      	b.n	80021ec <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	3b01      	subs	r3, #1
 80021ea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1f9      	bne.n	80021e6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021f2:	f7ff fc29 	bl	8001a48 <HAL_GetTick>
 80021f6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80021f8:	e018      	b.n	800222c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021fa:	f7ff fc25 	bl	8001a48 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d911      	bls.n	800222c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220c:	f043 0210 	orr.w	r2, r3, #16
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002218:	f043 0201 	orr.w	r2, r3, #1
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e007      	b.n	800223c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b01      	cmp	r3, #1
 8002238:	d1df      	bne.n	80021fa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20000000 	.word	0x20000000
 8002248:	431bde83 	.word	0x431bde83

0800224c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002254:	2300      	movs	r3, #0
 8002256:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b01      	cmp	r3, #1
 8002264:	d127      	bne.n	80022b6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0201 	bic.w	r2, r2, #1
 8002274:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002276:	f7ff fbe7 	bl	8001a48 <HAL_GetTick>
 800227a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800227c:	e014      	b.n	80022a8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800227e:	f7ff fbe3 	bl	8001a48 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d90d      	bls.n	80022a8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002290:	f043 0210 	orr.w	r2, r3, #16
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229c:	f043 0201 	orr.w	r2, r3, #1
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e007      	b.n	80022b8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d0e3      	beq.n	800227e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022d0:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <__NVIC_SetPriorityGrouping+0x44>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022dc:	4013      	ands	r3, r2
 80022de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022f2:	4a04      	ldr	r2, [pc, #16]	; (8002304 <__NVIC_SetPriorityGrouping+0x44>)
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	60d3      	str	r3, [r2, #12]
}
 80022f8:	bf00      	nop
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800230c:	4b04      	ldr	r3, [pc, #16]	; (8002320 <__NVIC_GetPriorityGrouping+0x18>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	0a1b      	lsrs	r3, r3, #8
 8002312:	f003 0307 	and.w	r3, r3, #7
}
 8002316:	4618      	mov	r0, r3
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	2b00      	cmp	r3, #0
 8002334:	db0b      	blt.n	800234e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	f003 021f 	and.w	r2, r3, #31
 800233c:	4906      	ldr	r1, [pc, #24]	; (8002358 <__NVIC_EnableIRQ+0x34>)
 800233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002342:	095b      	lsrs	r3, r3, #5
 8002344:	2001      	movs	r0, #1
 8002346:	fa00 f202 	lsl.w	r2, r0, r2
 800234a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr
 8002358:	e000e100 	.word	0xe000e100

0800235c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	6039      	str	r1, [r7, #0]
 8002366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236c:	2b00      	cmp	r3, #0
 800236e:	db0a      	blt.n	8002386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	b2da      	uxtb	r2, r3
 8002374:	490c      	ldr	r1, [pc, #48]	; (80023a8 <__NVIC_SetPriority+0x4c>)
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	0112      	lsls	r2, r2, #4
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	440b      	add	r3, r1
 8002380:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002384:	e00a      	b.n	800239c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	b2da      	uxtb	r2, r3
 800238a:	4908      	ldr	r1, [pc, #32]	; (80023ac <__NVIC_SetPriority+0x50>)
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	3b04      	subs	r3, #4
 8002394:	0112      	lsls	r2, r2, #4
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	440b      	add	r3, r1
 800239a:	761a      	strb	r2, [r3, #24]
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	e000e100 	.word	0xe000e100
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b089      	sub	sp, #36	; 0x24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f1c3 0307 	rsb	r3, r3, #7
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	bf28      	it	cs
 80023ce:	2304      	movcs	r3, #4
 80023d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3304      	adds	r3, #4
 80023d6:	2b06      	cmp	r3, #6
 80023d8:	d902      	bls.n	80023e0 <NVIC_EncodePriority+0x30>
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3b03      	subs	r3, #3
 80023de:	e000      	b.n	80023e2 <NVIC_EncodePriority+0x32>
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e4:	f04f 32ff 	mov.w	r2, #4294967295
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43da      	mvns	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	401a      	ands	r2, r3
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023f8:	f04f 31ff 	mov.w	r1, #4294967295
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002402:	43d9      	mvns	r1, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002408:	4313      	orrs	r3, r2
         );
}
 800240a:	4618      	mov	r0, r3
 800240c:	3724      	adds	r7, #36	; 0x24
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr

08002414 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3b01      	subs	r3, #1
 8002420:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002424:	d301      	bcc.n	800242a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002426:	2301      	movs	r3, #1
 8002428:	e00f      	b.n	800244a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800242a:	4a0a      	ldr	r2, [pc, #40]	; (8002454 <SysTick_Config+0x40>)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3b01      	subs	r3, #1
 8002430:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002432:	210f      	movs	r1, #15
 8002434:	f04f 30ff 	mov.w	r0, #4294967295
 8002438:	f7ff ff90 	bl	800235c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800243c:	4b05      	ldr	r3, [pc, #20]	; (8002454 <SysTick_Config+0x40>)
 800243e:	2200      	movs	r2, #0
 8002440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002442:	4b04      	ldr	r3, [pc, #16]	; (8002454 <SysTick_Config+0x40>)
 8002444:	2207      	movs	r2, #7
 8002446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	e000e010 	.word	0xe000e010

08002458 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f7ff ff2d 	bl	80022c0 <__NVIC_SetPriorityGrouping>
}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800246e:	b580      	push	{r7, lr}
 8002470:	b086      	sub	sp, #24
 8002472:	af00      	add	r7, sp, #0
 8002474:	4603      	mov	r3, r0
 8002476:	60b9      	str	r1, [r7, #8]
 8002478:	607a      	str	r2, [r7, #4]
 800247a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002480:	f7ff ff42 	bl	8002308 <__NVIC_GetPriorityGrouping>
 8002484:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	68b9      	ldr	r1, [r7, #8]
 800248a:	6978      	ldr	r0, [r7, #20]
 800248c:	f7ff ff90 	bl	80023b0 <NVIC_EncodePriority>
 8002490:	4602      	mov	r2, r0
 8002492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002496:	4611      	mov	r1, r2
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff ff5f 	bl	800235c <__NVIC_SetPriority>
}
 800249e:	bf00      	nop
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b082      	sub	sp, #8
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	4603      	mov	r3, r0
 80024ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ff35 	bl	8002324 <__NVIC_EnableIRQ>
}
 80024ba:	bf00      	nop
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7ff ffa2 	bl	8002414 <SysTick_Config>
 80024d0:	4603      	mov	r3, r0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024dc:	b480      	push	{r7}
 80024de:	b08b      	sub	sp, #44	; 0x2c
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024e6:	2300      	movs	r3, #0
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024ea:	2300      	movs	r3, #0
 80024ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ee:	e127      	b.n	8002740 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024f0:	2201      	movs	r2, #1
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	69fa      	ldr	r2, [r7, #28]
 8002500:	4013      	ands	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	429a      	cmp	r2, r3
 800250a:	f040 8116 	bne.w	800273a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b12      	cmp	r3, #18
 8002514:	d034      	beq.n	8002580 <HAL_GPIO_Init+0xa4>
 8002516:	2b12      	cmp	r3, #18
 8002518:	d80d      	bhi.n	8002536 <HAL_GPIO_Init+0x5a>
 800251a:	2b02      	cmp	r3, #2
 800251c:	d02b      	beq.n	8002576 <HAL_GPIO_Init+0x9a>
 800251e:	2b02      	cmp	r3, #2
 8002520:	d804      	bhi.n	800252c <HAL_GPIO_Init+0x50>
 8002522:	2b00      	cmp	r3, #0
 8002524:	d031      	beq.n	800258a <HAL_GPIO_Init+0xae>
 8002526:	2b01      	cmp	r3, #1
 8002528:	d01c      	beq.n	8002564 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800252a:	e048      	b.n	80025be <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800252c:	2b03      	cmp	r3, #3
 800252e:	d043      	beq.n	80025b8 <HAL_GPIO_Init+0xdc>
 8002530:	2b11      	cmp	r3, #17
 8002532:	d01b      	beq.n	800256c <HAL_GPIO_Init+0x90>
          break;
 8002534:	e043      	b.n	80025be <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002536:	4a89      	ldr	r2, [pc, #548]	; (800275c <HAL_GPIO_Init+0x280>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d026      	beq.n	800258a <HAL_GPIO_Init+0xae>
 800253c:	4a87      	ldr	r2, [pc, #540]	; (800275c <HAL_GPIO_Init+0x280>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d806      	bhi.n	8002550 <HAL_GPIO_Init+0x74>
 8002542:	4a87      	ldr	r2, [pc, #540]	; (8002760 <HAL_GPIO_Init+0x284>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d020      	beq.n	800258a <HAL_GPIO_Init+0xae>
 8002548:	4a86      	ldr	r2, [pc, #536]	; (8002764 <HAL_GPIO_Init+0x288>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d01d      	beq.n	800258a <HAL_GPIO_Init+0xae>
          break;
 800254e:	e036      	b.n	80025be <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002550:	4a85      	ldr	r2, [pc, #532]	; (8002768 <HAL_GPIO_Init+0x28c>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d019      	beq.n	800258a <HAL_GPIO_Init+0xae>
 8002556:	4a85      	ldr	r2, [pc, #532]	; (800276c <HAL_GPIO_Init+0x290>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d016      	beq.n	800258a <HAL_GPIO_Init+0xae>
 800255c:	4a84      	ldr	r2, [pc, #528]	; (8002770 <HAL_GPIO_Init+0x294>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d013      	beq.n	800258a <HAL_GPIO_Init+0xae>
          break;
 8002562:	e02c      	b.n	80025be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	623b      	str	r3, [r7, #32]
          break;
 800256a:	e028      	b.n	80025be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	3304      	adds	r3, #4
 8002572:	623b      	str	r3, [r7, #32]
          break;
 8002574:	e023      	b.n	80025be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	3308      	adds	r3, #8
 800257c:	623b      	str	r3, [r7, #32]
          break;
 800257e:	e01e      	b.n	80025be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	330c      	adds	r3, #12
 8002586:	623b      	str	r3, [r7, #32]
          break;
 8002588:	e019      	b.n	80025be <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d102      	bne.n	8002598 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002592:	2304      	movs	r3, #4
 8002594:	623b      	str	r3, [r7, #32]
          break;
 8002596:	e012      	b.n	80025be <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d105      	bne.n	80025ac <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025a0:	2308      	movs	r3, #8
 80025a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69fa      	ldr	r2, [r7, #28]
 80025a8:	611a      	str	r2, [r3, #16]
          break;
 80025aa:	e008      	b.n	80025be <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025ac:	2308      	movs	r3, #8
 80025ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69fa      	ldr	r2, [r7, #28]
 80025b4:	615a      	str	r2, [r3, #20]
          break;
 80025b6:	e002      	b.n	80025be <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025b8:	2300      	movs	r3, #0
 80025ba:	623b      	str	r3, [r7, #32]
          break;
 80025bc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	2bff      	cmp	r3, #255	; 0xff
 80025c2:	d801      	bhi.n	80025c8 <HAL_GPIO_Init+0xec>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	e001      	b.n	80025cc <HAL_GPIO_Init+0xf0>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3304      	adds	r3, #4
 80025cc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	2bff      	cmp	r3, #255	; 0xff
 80025d2:	d802      	bhi.n	80025da <HAL_GPIO_Init+0xfe>
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	e002      	b.n	80025e0 <HAL_GPIO_Init+0x104>
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	3b08      	subs	r3, #8
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	210f      	movs	r1, #15
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	fa01 f303 	lsl.w	r3, r1, r3
 80025ee:	43db      	mvns	r3, r3
 80025f0:	401a      	ands	r2, r3
 80025f2:	6a39      	ldr	r1, [r7, #32]
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	fa01 f303 	lsl.w	r3, r1, r3
 80025fa:	431a      	orrs	r2, r3
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 8096 	beq.w	800273a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800260e:	4b59      	ldr	r3, [pc, #356]	; (8002774 <HAL_GPIO_Init+0x298>)
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	4a58      	ldr	r2, [pc, #352]	; (8002774 <HAL_GPIO_Init+0x298>)
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	6193      	str	r3, [r2, #24]
 800261a:	4b56      	ldr	r3, [pc, #344]	; (8002774 <HAL_GPIO_Init+0x298>)
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	60bb      	str	r3, [r7, #8]
 8002624:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002626:	4a54      	ldr	r2, [pc, #336]	; (8002778 <HAL_GPIO_Init+0x29c>)
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	089b      	lsrs	r3, r3, #2
 800262c:	3302      	adds	r3, #2
 800262e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002632:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	220f      	movs	r2, #15
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43db      	mvns	r3, r3
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	4013      	ands	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a4b      	ldr	r2, [pc, #300]	; (800277c <HAL_GPIO_Init+0x2a0>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d013      	beq.n	800267a <HAL_GPIO_Init+0x19e>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a4a      	ldr	r2, [pc, #296]	; (8002780 <HAL_GPIO_Init+0x2a4>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d00d      	beq.n	8002676 <HAL_GPIO_Init+0x19a>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a49      	ldr	r2, [pc, #292]	; (8002784 <HAL_GPIO_Init+0x2a8>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d007      	beq.n	8002672 <HAL_GPIO_Init+0x196>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a48      	ldr	r2, [pc, #288]	; (8002788 <HAL_GPIO_Init+0x2ac>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d101      	bne.n	800266e <HAL_GPIO_Init+0x192>
 800266a:	2303      	movs	r3, #3
 800266c:	e006      	b.n	800267c <HAL_GPIO_Init+0x1a0>
 800266e:	2304      	movs	r3, #4
 8002670:	e004      	b.n	800267c <HAL_GPIO_Init+0x1a0>
 8002672:	2302      	movs	r3, #2
 8002674:	e002      	b.n	800267c <HAL_GPIO_Init+0x1a0>
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <HAL_GPIO_Init+0x1a0>
 800267a:	2300      	movs	r3, #0
 800267c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800267e:	f002 0203 	and.w	r2, r2, #3
 8002682:	0092      	lsls	r2, r2, #2
 8002684:	4093      	lsls	r3, r2
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	4313      	orrs	r3, r2
 800268a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800268c:	493a      	ldr	r1, [pc, #232]	; (8002778 <HAL_GPIO_Init+0x29c>)
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	089b      	lsrs	r3, r3, #2
 8002692:	3302      	adds	r3, #2
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d006      	beq.n	80026b4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026a6:	4b39      	ldr	r3, [pc, #228]	; (800278c <HAL_GPIO_Init+0x2b0>)
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	4938      	ldr	r1, [pc, #224]	; (800278c <HAL_GPIO_Init+0x2b0>)
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	600b      	str	r3, [r1, #0]
 80026b2:	e006      	b.n	80026c2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026b4:	4b35      	ldr	r3, [pc, #212]	; (800278c <HAL_GPIO_Init+0x2b0>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	43db      	mvns	r3, r3
 80026bc:	4933      	ldr	r1, [pc, #204]	; (800278c <HAL_GPIO_Init+0x2b0>)
 80026be:	4013      	ands	r3, r2
 80026c0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d006      	beq.n	80026dc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026ce:	4b2f      	ldr	r3, [pc, #188]	; (800278c <HAL_GPIO_Init+0x2b0>)
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	492e      	ldr	r1, [pc, #184]	; (800278c <HAL_GPIO_Init+0x2b0>)
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	604b      	str	r3, [r1, #4]
 80026da:	e006      	b.n	80026ea <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026dc:	4b2b      	ldr	r3, [pc, #172]	; (800278c <HAL_GPIO_Init+0x2b0>)
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	43db      	mvns	r3, r3
 80026e4:	4929      	ldr	r1, [pc, #164]	; (800278c <HAL_GPIO_Init+0x2b0>)
 80026e6:	4013      	ands	r3, r2
 80026e8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d006      	beq.n	8002704 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026f6:	4b25      	ldr	r3, [pc, #148]	; (800278c <HAL_GPIO_Init+0x2b0>)
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	4924      	ldr	r1, [pc, #144]	; (800278c <HAL_GPIO_Init+0x2b0>)
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	4313      	orrs	r3, r2
 8002700:	608b      	str	r3, [r1, #8]
 8002702:	e006      	b.n	8002712 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002704:	4b21      	ldr	r3, [pc, #132]	; (800278c <HAL_GPIO_Init+0x2b0>)
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	43db      	mvns	r3, r3
 800270c:	491f      	ldr	r1, [pc, #124]	; (800278c <HAL_GPIO_Init+0x2b0>)
 800270e:	4013      	ands	r3, r2
 8002710:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d006      	beq.n	800272c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800271e:	4b1b      	ldr	r3, [pc, #108]	; (800278c <HAL_GPIO_Init+0x2b0>)
 8002720:	68da      	ldr	r2, [r3, #12]
 8002722:	491a      	ldr	r1, [pc, #104]	; (800278c <HAL_GPIO_Init+0x2b0>)
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	4313      	orrs	r3, r2
 8002728:	60cb      	str	r3, [r1, #12]
 800272a:	e006      	b.n	800273a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800272c:	4b17      	ldr	r3, [pc, #92]	; (800278c <HAL_GPIO_Init+0x2b0>)
 800272e:	68da      	ldr	r2, [r3, #12]
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	43db      	mvns	r3, r3
 8002734:	4915      	ldr	r1, [pc, #84]	; (800278c <HAL_GPIO_Init+0x2b0>)
 8002736:	4013      	ands	r3, r2
 8002738:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	3301      	adds	r3, #1
 800273e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	fa22 f303 	lsr.w	r3, r2, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	f47f aed0 	bne.w	80024f0 <HAL_GPIO_Init+0x14>
  }
}
 8002750:	bf00      	nop
 8002752:	372c      	adds	r7, #44	; 0x2c
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	10210000 	.word	0x10210000
 8002760:	10110000 	.word	0x10110000
 8002764:	10120000 	.word	0x10120000
 8002768:	10310000 	.word	0x10310000
 800276c:	10320000 	.word	0x10320000
 8002770:	10220000 	.word	0x10220000
 8002774:	40021000 	.word	0x40021000
 8002778:	40010000 	.word	0x40010000
 800277c:	40010800 	.word	0x40010800
 8002780:	40010c00 	.word	0x40010c00
 8002784:	40011000 	.word	0x40011000
 8002788:	40011400 	.word	0x40011400
 800278c:	40010400 	.word	0x40010400

08002790 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	460b      	mov	r3, r1
 800279a:	807b      	strh	r3, [r7, #2]
 800279c:	4613      	mov	r3, r2
 800279e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027a0:	787b      	ldrb	r3, [r7, #1]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027a6:	887a      	ldrh	r2, [r7, #2]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027ac:	e003      	b.n	80027b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027ae:	887b      	ldrh	r3, [r7, #2]
 80027b0:	041a      	lsls	r2, r3, #16
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	611a      	str	r2, [r3, #16]
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr

080027c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80027ca:	4b08      	ldr	r3, [pc, #32]	; (80027ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027cc:	695a      	ldr	r2, [r3, #20]
 80027ce:	88fb      	ldrh	r3, [r7, #6]
 80027d0:	4013      	ands	r3, r2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d006      	beq.n	80027e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027d6:	4a05      	ldr	r2, [pc, #20]	; (80027ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027d8:	88fb      	ldrh	r3, [r7, #6]
 80027da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027dc:	88fb      	ldrh	r3, [r7, #6]
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 f806 	bl	80027f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80027e4:	bf00      	nop
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40010400 	.word	0x40010400

080027f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr

08002804 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e26c      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	f000 8087 	beq.w	8002932 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002824:	4b92      	ldr	r3, [pc, #584]	; (8002a70 <HAL_RCC_OscConfig+0x26c>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 030c 	and.w	r3, r3, #12
 800282c:	2b04      	cmp	r3, #4
 800282e:	d00c      	beq.n	800284a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002830:	4b8f      	ldr	r3, [pc, #572]	; (8002a70 <HAL_RCC_OscConfig+0x26c>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 030c 	and.w	r3, r3, #12
 8002838:	2b08      	cmp	r3, #8
 800283a:	d112      	bne.n	8002862 <HAL_RCC_OscConfig+0x5e>
 800283c:	4b8c      	ldr	r3, [pc, #560]	; (8002a70 <HAL_RCC_OscConfig+0x26c>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002848:	d10b      	bne.n	8002862 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800284a:	4b89      	ldr	r3, [pc, #548]	; (8002a70 <HAL_RCC_OscConfig+0x26c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d06c      	beq.n	8002930 <HAL_RCC_OscConfig+0x12c>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d168      	bne.n	8002930 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e246      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800286a:	d106      	bne.n	800287a <HAL_RCC_OscConfig+0x76>
 800286c:	4b80      	ldr	r3, [pc, #512]	; (8002a70 <HAL_RCC_OscConfig+0x26c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a7f      	ldr	r2, [pc, #508]	; (8002a70 <HAL_RCC_OscConfig+0x26c>)
 8002872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002876:	6013      	str	r3, [r2, #0]
 8002878:	e02e      	b.n	80028d8 <HAL_RCC_OscConfig+0xd4>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10c      	bne.n	800289c <HAL_RCC_OscConfig+0x98>
 8002882:	4b7b      	ldr	r3, [pc, #492]	; (8002a70 <HAL_RCC_OscConfig+0x26c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a7a      	ldr	r2, [pc, #488]	; (8002a70 <HAL_RCC_OscConfig+0x26c>)
 8002888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	4b78      	ldr	r3, [pc, #480]	; (8002a70 <HAL_RCC_OscConfig+0x26c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a77      	ldr	r2, [pc, #476]	; (8002a70 <HAL_RCC_OscConfig+0x26c>)
 8002894:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	e01d      	b.n	80028d8 <HAL_RCC_OscConfig+0xd4>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028a4:	d10c      	bne.n	80028c0 <HAL_RCC_OscConfig+0xbc>
 80028a6:	4b72      	ldr	r3, [pc, #456]	; (8002a70 <HAL_RCC_OscConfig+0x26c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a71      	ldr	r2, [pc, #452]	; (8002a70 <HAL_RCC_OscConfig+0x26c>)
 80028ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	4b6f      	ldr	r3, [pc, #444]	; (8002a70 <HAL_RCC_OscConfig+0x26c>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a6e      	ldr	r2, [pc, #440]	; (8002a70 <HAL_RCC_OscConfig+0x26c>)
 80028b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	e00b      	b.n	80028d8 <HAL_RCC_OscConfig+0xd4>
 80028c0:	4b6b      	ldr	r3, [pc, #428]	; (8002a70 <HAL_RCC_OscConfig+0x26c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a6a      	ldr	r2, [pc, #424]	; (8002a70 <HAL_RCC_OscConfig+0x26c>)
 80028c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ca:	6013      	str	r3, [r2, #0]
 80028cc:	4b68      	ldr	r3, [pc, #416]	; (8002a70 <HAL_RCC_OscConfig+0x26c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a67      	ldr	r2, [pc, #412]	; (8002a70 <HAL_RCC_OscConfig+0x26c>)
 80028d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d013      	beq.n	8002908 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e0:	f7ff f8b2 	bl	8001a48 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e8:	f7ff f8ae 	bl	8001a48 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b64      	cmp	r3, #100	; 0x64
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e1fa      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fa:	4b5d      	ldr	r3, [pc, #372]	; (8002a70 <HAL_RCC_OscConfig+0x26c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0f0      	beq.n	80028e8 <HAL_RCC_OscConfig+0xe4>
 8002906:	e014      	b.n	8002932 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002908:	f7ff f89e 	bl	8001a48 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002910:	f7ff f89a 	bl	8001a48 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b64      	cmp	r3, #100	; 0x64
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e1e6      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002922:	4b53      	ldr	r3, [pc, #332]	; (8002a70 <HAL_RCC_OscConfig+0x26c>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1f0      	bne.n	8002910 <HAL_RCC_OscConfig+0x10c>
 800292e:	e000      	b.n	8002932 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d063      	beq.n	8002a06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800293e:	4b4c      	ldr	r3, [pc, #304]	; (8002a70 <HAL_RCC_OscConfig+0x26c>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f003 030c 	and.w	r3, r3, #12
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00b      	beq.n	8002962 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800294a:	4b49      	ldr	r3, [pc, #292]	; (8002a70 <HAL_RCC_OscConfig+0x26c>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f003 030c 	and.w	r3, r3, #12
 8002952:	2b08      	cmp	r3, #8
 8002954:	d11c      	bne.n	8002990 <HAL_RCC_OscConfig+0x18c>
 8002956:	4b46      	ldr	r3, [pc, #280]	; (8002a70 <HAL_RCC_OscConfig+0x26c>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d116      	bne.n	8002990 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002962:	4b43      	ldr	r3, [pc, #268]	; (8002a70 <HAL_RCC_OscConfig+0x26c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d005      	beq.n	800297a <HAL_RCC_OscConfig+0x176>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d001      	beq.n	800297a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e1ba      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800297a:	4b3d      	ldr	r3, [pc, #244]	; (8002a70 <HAL_RCC_OscConfig+0x26c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	4939      	ldr	r1, [pc, #228]	; (8002a70 <HAL_RCC_OscConfig+0x26c>)
 800298a:	4313      	orrs	r3, r2
 800298c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800298e:	e03a      	b.n	8002a06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d020      	beq.n	80029da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002998:	4b36      	ldr	r3, [pc, #216]	; (8002a74 <HAL_RCC_OscConfig+0x270>)
 800299a:	2201      	movs	r2, #1
 800299c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299e:	f7ff f853 	bl	8001a48 <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029a6:	f7ff f84f 	bl	8001a48 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e19b      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b8:	4b2d      	ldr	r3, [pc, #180]	; (8002a70 <HAL_RCC_OscConfig+0x26c>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0f0      	beq.n	80029a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c4:	4b2a      	ldr	r3, [pc, #168]	; (8002a70 <HAL_RCC_OscConfig+0x26c>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	4927      	ldr	r1, [pc, #156]	; (8002a70 <HAL_RCC_OscConfig+0x26c>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	600b      	str	r3, [r1, #0]
 80029d8:	e015      	b.n	8002a06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029da:	4b26      	ldr	r3, [pc, #152]	; (8002a74 <HAL_RCC_OscConfig+0x270>)
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e0:	f7ff f832 	bl	8001a48 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029e8:	f7ff f82e 	bl	8001a48 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e17a      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029fa:	4b1d      	ldr	r3, [pc, #116]	; (8002a70 <HAL_RCC_OscConfig+0x26c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f0      	bne.n	80029e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0308 	and.w	r3, r3, #8
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d03a      	beq.n	8002a88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d019      	beq.n	8002a4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a1a:	4b17      	ldr	r3, [pc, #92]	; (8002a78 <HAL_RCC_OscConfig+0x274>)
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a20:	f7ff f812 	bl	8001a48 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a28:	f7ff f80e 	bl	8001a48 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e15a      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a3a:	4b0d      	ldr	r3, [pc, #52]	; (8002a70 <HAL_RCC_OscConfig+0x26c>)
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0f0      	beq.n	8002a28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a46:	2001      	movs	r0, #1
 8002a48:	f000 fac6 	bl	8002fd8 <RCC_Delay>
 8002a4c:	e01c      	b.n	8002a88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a4e:	4b0a      	ldr	r3, [pc, #40]	; (8002a78 <HAL_RCC_OscConfig+0x274>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a54:	f7fe fff8 	bl	8001a48 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a5a:	e00f      	b.n	8002a7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a5c:	f7fe fff4 	bl	8001a48 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d908      	bls.n	8002a7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e140      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4ec>
 8002a6e:	bf00      	nop
 8002a70:	40021000 	.word	0x40021000
 8002a74:	42420000 	.word	0x42420000
 8002a78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a7c:	4b9e      	ldr	r3, [pc, #632]	; (8002cf8 <HAL_RCC_OscConfig+0x4f4>)
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1e9      	bne.n	8002a5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 80a6 	beq.w	8002be2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a96:	2300      	movs	r3, #0
 8002a98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a9a:	4b97      	ldr	r3, [pc, #604]	; (8002cf8 <HAL_RCC_OscConfig+0x4f4>)
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10d      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa6:	4b94      	ldr	r3, [pc, #592]	; (8002cf8 <HAL_RCC_OscConfig+0x4f4>)
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	4a93      	ldr	r2, [pc, #588]	; (8002cf8 <HAL_RCC_OscConfig+0x4f4>)
 8002aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab0:	61d3      	str	r3, [r2, #28]
 8002ab2:	4b91      	ldr	r3, [pc, #580]	; (8002cf8 <HAL_RCC_OscConfig+0x4f4>)
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aba:	60bb      	str	r3, [r7, #8]
 8002abc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac2:	4b8e      	ldr	r3, [pc, #568]	; (8002cfc <HAL_RCC_OscConfig+0x4f8>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d118      	bne.n	8002b00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ace:	4b8b      	ldr	r3, [pc, #556]	; (8002cfc <HAL_RCC_OscConfig+0x4f8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a8a      	ldr	r2, [pc, #552]	; (8002cfc <HAL_RCC_OscConfig+0x4f8>)
 8002ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ada:	f7fe ffb5 	bl	8001a48 <HAL_GetTick>
 8002ade:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae0:	e008      	b.n	8002af4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae2:	f7fe ffb1 	bl	8001a48 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b64      	cmp	r3, #100	; 0x64
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e0fd      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af4:	4b81      	ldr	r3, [pc, #516]	; (8002cfc <HAL_RCC_OscConfig+0x4f8>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d0f0      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d106      	bne.n	8002b16 <HAL_RCC_OscConfig+0x312>
 8002b08:	4b7b      	ldr	r3, [pc, #492]	; (8002cf8 <HAL_RCC_OscConfig+0x4f4>)
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	4a7a      	ldr	r2, [pc, #488]	; (8002cf8 <HAL_RCC_OscConfig+0x4f4>)
 8002b0e:	f043 0301 	orr.w	r3, r3, #1
 8002b12:	6213      	str	r3, [r2, #32]
 8002b14:	e02d      	b.n	8002b72 <HAL_RCC_OscConfig+0x36e>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10c      	bne.n	8002b38 <HAL_RCC_OscConfig+0x334>
 8002b1e:	4b76      	ldr	r3, [pc, #472]	; (8002cf8 <HAL_RCC_OscConfig+0x4f4>)
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	4a75      	ldr	r2, [pc, #468]	; (8002cf8 <HAL_RCC_OscConfig+0x4f4>)
 8002b24:	f023 0301 	bic.w	r3, r3, #1
 8002b28:	6213      	str	r3, [r2, #32]
 8002b2a:	4b73      	ldr	r3, [pc, #460]	; (8002cf8 <HAL_RCC_OscConfig+0x4f4>)
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	4a72      	ldr	r2, [pc, #456]	; (8002cf8 <HAL_RCC_OscConfig+0x4f4>)
 8002b30:	f023 0304 	bic.w	r3, r3, #4
 8002b34:	6213      	str	r3, [r2, #32]
 8002b36:	e01c      	b.n	8002b72 <HAL_RCC_OscConfig+0x36e>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	2b05      	cmp	r3, #5
 8002b3e:	d10c      	bne.n	8002b5a <HAL_RCC_OscConfig+0x356>
 8002b40:	4b6d      	ldr	r3, [pc, #436]	; (8002cf8 <HAL_RCC_OscConfig+0x4f4>)
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	4a6c      	ldr	r2, [pc, #432]	; (8002cf8 <HAL_RCC_OscConfig+0x4f4>)
 8002b46:	f043 0304 	orr.w	r3, r3, #4
 8002b4a:	6213      	str	r3, [r2, #32]
 8002b4c:	4b6a      	ldr	r3, [pc, #424]	; (8002cf8 <HAL_RCC_OscConfig+0x4f4>)
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	4a69      	ldr	r2, [pc, #420]	; (8002cf8 <HAL_RCC_OscConfig+0x4f4>)
 8002b52:	f043 0301 	orr.w	r3, r3, #1
 8002b56:	6213      	str	r3, [r2, #32]
 8002b58:	e00b      	b.n	8002b72 <HAL_RCC_OscConfig+0x36e>
 8002b5a:	4b67      	ldr	r3, [pc, #412]	; (8002cf8 <HAL_RCC_OscConfig+0x4f4>)
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	4a66      	ldr	r2, [pc, #408]	; (8002cf8 <HAL_RCC_OscConfig+0x4f4>)
 8002b60:	f023 0301 	bic.w	r3, r3, #1
 8002b64:	6213      	str	r3, [r2, #32]
 8002b66:	4b64      	ldr	r3, [pc, #400]	; (8002cf8 <HAL_RCC_OscConfig+0x4f4>)
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	4a63      	ldr	r2, [pc, #396]	; (8002cf8 <HAL_RCC_OscConfig+0x4f4>)
 8002b6c:	f023 0304 	bic.w	r3, r3, #4
 8002b70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d015      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b7a:	f7fe ff65 	bl	8001a48 <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b80:	e00a      	b.n	8002b98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b82:	f7fe ff61 	bl	8001a48 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e0ab      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b98:	4b57      	ldr	r3, [pc, #348]	; (8002cf8 <HAL_RCC_OscConfig+0x4f4>)
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d0ee      	beq.n	8002b82 <HAL_RCC_OscConfig+0x37e>
 8002ba4:	e014      	b.n	8002bd0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba6:	f7fe ff4f 	bl	8001a48 <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bac:	e00a      	b.n	8002bc4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bae:	f7fe ff4b 	bl	8001a48 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e095      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc4:	4b4c      	ldr	r3, [pc, #304]	; (8002cf8 <HAL_RCC_OscConfig+0x4f4>)
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1ee      	bne.n	8002bae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bd0:	7dfb      	ldrb	r3, [r7, #23]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d105      	bne.n	8002be2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd6:	4b48      	ldr	r3, [pc, #288]	; (8002cf8 <HAL_RCC_OscConfig+0x4f4>)
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	4a47      	ldr	r2, [pc, #284]	; (8002cf8 <HAL_RCC_OscConfig+0x4f4>)
 8002bdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002be0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 8081 	beq.w	8002cee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bec:	4b42      	ldr	r3, [pc, #264]	; (8002cf8 <HAL_RCC_OscConfig+0x4f4>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 030c 	and.w	r3, r3, #12
 8002bf4:	2b08      	cmp	r3, #8
 8002bf6:	d061      	beq.n	8002cbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d146      	bne.n	8002c8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c00:	4b3f      	ldr	r3, [pc, #252]	; (8002d00 <HAL_RCC_OscConfig+0x4fc>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c06:	f7fe ff1f 	bl	8001a48 <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c0c:	e008      	b.n	8002c20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c0e:	f7fe ff1b 	bl	8001a48 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e067      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c20:	4b35      	ldr	r3, [pc, #212]	; (8002cf8 <HAL_RCC_OscConfig+0x4f4>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1f0      	bne.n	8002c0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c34:	d108      	bne.n	8002c48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c36:	4b30      	ldr	r3, [pc, #192]	; (8002cf8 <HAL_RCC_OscConfig+0x4f4>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	492d      	ldr	r1, [pc, #180]	; (8002cf8 <HAL_RCC_OscConfig+0x4f4>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c48:	4b2b      	ldr	r3, [pc, #172]	; (8002cf8 <HAL_RCC_OscConfig+0x4f4>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a19      	ldr	r1, [r3, #32]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	4927      	ldr	r1, [pc, #156]	; (8002cf8 <HAL_RCC_OscConfig+0x4f4>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c60:	4b27      	ldr	r3, [pc, #156]	; (8002d00 <HAL_RCC_OscConfig+0x4fc>)
 8002c62:	2201      	movs	r2, #1
 8002c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c66:	f7fe feef 	bl	8001a48 <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c6e:	f7fe feeb 	bl	8001a48 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e037      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c80:	4b1d      	ldr	r3, [pc, #116]	; (8002cf8 <HAL_RCC_OscConfig+0x4f4>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0f0      	beq.n	8002c6e <HAL_RCC_OscConfig+0x46a>
 8002c8c:	e02f      	b.n	8002cee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c8e:	4b1c      	ldr	r3, [pc, #112]	; (8002d00 <HAL_RCC_OscConfig+0x4fc>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c94:	f7fe fed8 	bl	8001a48 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c9c:	f7fe fed4 	bl	8001a48 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e020      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cae:	4b12      	ldr	r3, [pc, #72]	; (8002cf8 <HAL_RCC_OscConfig+0x4f4>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1f0      	bne.n	8002c9c <HAL_RCC_OscConfig+0x498>
 8002cba:	e018      	b.n	8002cee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d101      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e013      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <HAL_RCC_OscConfig+0x4f4>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d106      	bne.n	8002cea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d001      	beq.n	8002cee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e000      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3718      	adds	r7, #24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	40007000 	.word	0x40007000
 8002d00:	42420060 	.word	0x42420060

08002d04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0d0      	b.n	8002eba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d18:	4b6a      	ldr	r3, [pc, #424]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d910      	bls.n	8002d48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d26:	4b67      	ldr	r3, [pc, #412]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f023 0207 	bic.w	r2, r3, #7
 8002d2e:	4965      	ldr	r1, [pc, #404]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d36:	4b63      	ldr	r3, [pc, #396]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d001      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e0b8      	b.n	8002eba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d020      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d005      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d60:	4b59      	ldr	r3, [pc, #356]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	4a58      	ldr	r2, [pc, #352]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0308 	and.w	r3, r3, #8
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d005      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d78:	4b53      	ldr	r3, [pc, #332]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	4a52      	ldr	r2, [pc, #328]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d84:	4b50      	ldr	r3, [pc, #320]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	494d      	ldr	r1, [pc, #308]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d040      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d107      	bne.n	8002dba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002daa:	4b47      	ldr	r3, [pc, #284]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d115      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e07f      	b.n	8002eba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d107      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc2:	4b41      	ldr	r3, [pc, #260]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d109      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e073      	b.n	8002eba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd2:	4b3d      	ldr	r3, [pc, #244]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e06b      	b.n	8002eba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002de2:	4b39      	ldr	r3, [pc, #228]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f023 0203 	bic.w	r2, r3, #3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	4936      	ldr	r1, [pc, #216]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002df4:	f7fe fe28 	bl	8001a48 <HAL_GetTick>
 8002df8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfa:	e00a      	b.n	8002e12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dfc:	f7fe fe24 	bl	8001a48 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e053      	b.n	8002eba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e12:	4b2d      	ldr	r3, [pc, #180]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f003 020c 	and.w	r2, r3, #12
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d1eb      	bne.n	8002dfc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e24:	4b27      	ldr	r3, [pc, #156]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d210      	bcs.n	8002e54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e32:	4b24      	ldr	r3, [pc, #144]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f023 0207 	bic.w	r2, r3, #7
 8002e3a:	4922      	ldr	r1, [pc, #136]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e42:	4b20      	ldr	r3, [pc, #128]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d001      	beq.n	8002e54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e032      	b.n	8002eba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d008      	beq.n	8002e72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e60:	4b19      	ldr	r3, [pc, #100]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	4916      	ldr	r1, [pc, #88]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0308 	and.w	r3, r3, #8
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d009      	beq.n	8002e92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e7e:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	490e      	ldr	r1, [pc, #56]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e92:	f000 f821 	bl	8002ed8 <HAL_RCC_GetSysClockFreq>
 8002e96:	4601      	mov	r1, r0
 8002e98:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	091b      	lsrs	r3, r3, #4
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	4a0a      	ldr	r2, [pc, #40]	; (8002ecc <HAL_RCC_ClockConfig+0x1c8>)
 8002ea4:	5cd3      	ldrb	r3, [r2, r3]
 8002ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8002eaa:	4a09      	ldr	r2, [pc, #36]	; (8002ed0 <HAL_RCC_ClockConfig+0x1cc>)
 8002eac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002eae:	4b09      	ldr	r3, [pc, #36]	; (8002ed4 <HAL_RCC_ClockConfig+0x1d0>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fe fd86 	bl	80019c4 <HAL_InitTick>

  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40022000 	.word	0x40022000
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	08004da8 	.word	0x08004da8
 8002ed0:	20000000 	.word	0x20000000
 8002ed4:	20000004 	.word	0x20000004

08002ed8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ed8:	b490      	push	{r4, r7}
 8002eda:	b08a      	sub	sp, #40	; 0x28
 8002edc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002ede:	4b2a      	ldr	r3, [pc, #168]	; (8002f88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ee0:	1d3c      	adds	r4, r7, #4
 8002ee2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ee4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ee8:	4b28      	ldr	r3, [pc, #160]	; (8002f8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002eea:	881b      	ldrh	r3, [r3, #0]
 8002eec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61fb      	str	r3, [r7, #28]
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61bb      	str	r3, [r7, #24]
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f02:	4b23      	ldr	r3, [pc, #140]	; (8002f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	f003 030c 	and.w	r3, r3, #12
 8002f0e:	2b04      	cmp	r3, #4
 8002f10:	d002      	beq.n	8002f18 <HAL_RCC_GetSysClockFreq+0x40>
 8002f12:	2b08      	cmp	r3, #8
 8002f14:	d003      	beq.n	8002f1e <HAL_RCC_GetSysClockFreq+0x46>
 8002f16:	e02d      	b.n	8002f74 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f18:	4b1e      	ldr	r3, [pc, #120]	; (8002f94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f1a:	623b      	str	r3, [r7, #32]
      break;
 8002f1c:	e02d      	b.n	8002f7a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	0c9b      	lsrs	r3, r3, #18
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f2a:	4413      	add	r3, r2
 8002f2c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f30:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d013      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f3c:	4b14      	ldr	r3, [pc, #80]	; (8002f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	0c5b      	lsrs	r3, r3, #17
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f4a:	4413      	add	r3, r2
 8002f4c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f50:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	4a0f      	ldr	r2, [pc, #60]	; (8002f94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f56:	fb02 f203 	mul.w	r2, r2, r3
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24
 8002f62:	e004      	b.n	8002f6e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	4a0c      	ldr	r2, [pc, #48]	; (8002f98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f68:	fb02 f303 	mul.w	r3, r2, r3
 8002f6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f70:	623b      	str	r3, [r7, #32]
      break;
 8002f72:	e002      	b.n	8002f7a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f74:	4b07      	ldr	r3, [pc, #28]	; (8002f94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f76:	623b      	str	r3, [r7, #32]
      break;
 8002f78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3728      	adds	r7, #40	; 0x28
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bc90      	pop	{r4, r7}
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	08004d80 	.word	0x08004d80
 8002f8c:	08004d90 	.word	0x08004d90
 8002f90:	40021000 	.word	0x40021000
 8002f94:	007a1200 	.word	0x007a1200
 8002f98:	003d0900 	.word	0x003d0900

08002f9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fa0:	4b02      	ldr	r3, [pc, #8]	; (8002fac <HAL_RCC_GetHCLKFreq+0x10>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr
 8002fac:	20000000 	.word	0x20000000

08002fb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fb4:	f7ff fff2 	bl	8002f9c <HAL_RCC_GetHCLKFreq>
 8002fb8:	4601      	mov	r1, r0
 8002fba:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	0adb      	lsrs	r3, r3, #11
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	4a03      	ldr	r2, [pc, #12]	; (8002fd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fc6:	5cd3      	ldrb	r3, [r2, r3]
 8002fc8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	08004db8 	.word	0x08004db8

08002fd8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fe0:	4b0a      	ldr	r3, [pc, #40]	; (800300c <RCC_Delay+0x34>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a0a      	ldr	r2, [pc, #40]	; (8003010 <RCC_Delay+0x38>)
 8002fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fea:	0a5b      	lsrs	r3, r3, #9
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	fb02 f303 	mul.w	r3, r2, r3
 8002ff2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ff4:	bf00      	nop
  }
  while (Delay --);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	1e5a      	subs	r2, r3, #1
 8002ffa:	60fa      	str	r2, [r7, #12]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1f9      	bne.n	8002ff4 <RCC_Delay+0x1c>
}
 8003000:	bf00      	nop
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	20000000 	.word	0x20000000
 8003010:	10624dd3 	.word	0x10624dd3

08003014 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800301c:	2300      	movs	r3, #0
 800301e:	613b      	str	r3, [r7, #16]
 8003020:	2300      	movs	r3, #0
 8003022:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b00      	cmp	r3, #0
 800302e:	d07d      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003030:	2300      	movs	r3, #0
 8003032:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003034:	4b4f      	ldr	r3, [pc, #316]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003036:	69db      	ldr	r3, [r3, #28]
 8003038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10d      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003040:	4b4c      	ldr	r3, [pc, #304]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	4a4b      	ldr	r2, [pc, #300]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800304a:	61d3      	str	r3, [r2, #28]
 800304c:	4b49      	ldr	r3, [pc, #292]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800304e:	69db      	ldr	r3, [r3, #28]
 8003050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003054:	60bb      	str	r3, [r7, #8]
 8003056:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003058:	2301      	movs	r3, #1
 800305a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800305c:	4b46      	ldr	r3, [pc, #280]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003064:	2b00      	cmp	r3, #0
 8003066:	d118      	bne.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003068:	4b43      	ldr	r3, [pc, #268]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a42      	ldr	r2, [pc, #264]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800306e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003072:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003074:	f7fe fce8 	bl	8001a48 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800307a:	e008      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800307c:	f7fe fce4 	bl	8001a48 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b64      	cmp	r3, #100	; 0x64
 8003088:	d901      	bls.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e06d      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800308e:	4b3a      	ldr	r3, [pc, #232]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0f0      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800309a:	4b36      	ldr	r3, [pc, #216]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030a2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d02e      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d027      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030b8:	4b2e      	ldr	r3, [pc, #184]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030c0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030c2:	4b2e      	ldr	r3, [pc, #184]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80030c4:	2201      	movs	r2, #1
 80030c6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030c8:	4b2c      	ldr	r3, [pc, #176]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80030ce:	4a29      	ldr	r2, [pc, #164]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d014      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030de:	f7fe fcb3 	bl	8001a48 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e4:	e00a      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030e6:	f7fe fcaf 	bl	8001a48 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d901      	bls.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e036      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030fc:	4b1d      	ldr	r3, [pc, #116]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0ee      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003108:	4b1a      	ldr	r3, [pc, #104]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	4917      	ldr	r1, [pc, #92]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003116:	4313      	orrs	r3, r2
 8003118:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800311a:	7dfb      	ldrb	r3, [r7, #23]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d105      	bne.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003120:	4b14      	ldr	r3, [pc, #80]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	4a13      	ldr	r2, [pc, #76]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003126:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800312a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d008      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003138:	4b0e      	ldr	r3, [pc, #56]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	490b      	ldr	r1, [pc, #44]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003146:	4313      	orrs	r3, r2
 8003148:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0310 	and.w	r3, r3, #16
 8003152:	2b00      	cmp	r3, #0
 8003154:	d008      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003156:	4b07      	ldr	r3, [pc, #28]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	4904      	ldr	r1, [pc, #16]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003164:	4313      	orrs	r3, r2
 8003166:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40021000 	.word	0x40021000
 8003178:	40007000 	.word	0x40007000
 800317c:	42420440 	.word	0x42420440

08003180 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003180:	b590      	push	{r4, r7, lr}
 8003182:	b08d      	sub	sp, #52	; 0x34
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003188:	4b55      	ldr	r3, [pc, #340]	; (80032e0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800318a:	f107 040c 	add.w	r4, r7, #12
 800318e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003190:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003194:	4b53      	ldr	r3, [pc, #332]	; (80032e4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003196:	881b      	ldrh	r3, [r3, #0]
 8003198:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800319a:	2300      	movs	r3, #0
 800319c:	627b      	str	r3, [r7, #36]	; 0x24
 800319e:	2300      	movs	r3, #0
 80031a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031a2:	2300      	movs	r3, #0
 80031a4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	61fb      	str	r3, [r7, #28]
 80031aa:	2300      	movs	r3, #0
 80031ac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d07f      	beq.n	80032b4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80031b4:	2b10      	cmp	r3, #16
 80031b6:	d002      	beq.n	80031be <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d048      	beq.n	800324e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80031bc:	e08b      	b.n	80032d6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80031be:	4b4a      	ldr	r3, [pc, #296]	; (80032e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80031c4:	4b48      	ldr	r3, [pc, #288]	; (80032e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d07f      	beq.n	80032d0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	0c9b      	lsrs	r3, r3, #18
 80031d4:	f003 030f 	and.w	r3, r3, #15
 80031d8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80031dc:	4413      	add	r3, r2
 80031de:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80031e2:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d018      	beq.n	8003220 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031ee:	4b3e      	ldr	r3, [pc, #248]	; (80032e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	0c5b      	lsrs	r3, r3, #17
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80031fc:	4413      	add	r3, r2
 80031fe:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003202:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00d      	beq.n	800322a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800320e:	4a37      	ldr	r2, [pc, #220]	; (80032ec <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	fbb2 f2f3 	udiv	r2, r2, r3
 8003216:	6a3b      	ldr	r3, [r7, #32]
 8003218:	fb02 f303 	mul.w	r3, r2, r3
 800321c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800321e:	e004      	b.n	800322a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003220:	6a3b      	ldr	r3, [r7, #32]
 8003222:	4a33      	ldr	r2, [pc, #204]	; (80032f0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003224:	fb02 f303 	mul.w	r3, r2, r3
 8003228:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800322a:	4b2f      	ldr	r3, [pc, #188]	; (80032e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003232:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003236:	d102      	bne.n	800323e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8003238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800323c:	e048      	b.n	80032d0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800323e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	4a2c      	ldr	r2, [pc, #176]	; (80032f4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003244:	fba2 2303 	umull	r2, r3, r2, r3
 8003248:	085b      	lsrs	r3, r3, #1
 800324a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800324c:	e040      	b.n	80032d0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800324e:	4b26      	ldr	r3, [pc, #152]	; (80032e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800325a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800325e:	d108      	bne.n	8003272 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 800326a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800326e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003270:	e01f      	b.n	80032b2 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800327c:	d109      	bne.n	8003292 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800327e:	4b1a      	ldr	r3, [pc, #104]	; (80032e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 800328a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800328e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003290:	e00f      	b.n	80032b2 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003298:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800329c:	d11a      	bne.n	80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800329e:	4b12      	ldr	r3, [pc, #72]	; (80032e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d014      	beq.n	80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80032aa:	f24f 4324 	movw	r3, #62500	; 0xf424
 80032ae:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80032b0:	e010      	b.n	80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80032b2:	e00f      	b.n	80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80032b4:	f7ff fe7c 	bl	8002fb0 <HAL_RCC_GetPCLK2Freq>
 80032b8:	4602      	mov	r2, r0
 80032ba:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	0b9b      	lsrs	r3, r3, #14
 80032c0:	f003 0303 	and.w	r3, r3, #3
 80032c4:	3301      	adds	r3, #1
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032cc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80032ce:	e002      	b.n	80032d6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80032d0:	bf00      	nop
 80032d2:	e000      	b.n	80032d6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80032d4:	bf00      	nop
    }
  }
  return (frequency);
 80032d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3734      	adds	r7, #52	; 0x34
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd90      	pop	{r4, r7, pc}
 80032e0:	08004d94 	.word	0x08004d94
 80032e4:	08004da4 	.word	0x08004da4
 80032e8:	40021000 	.word	0x40021000
 80032ec:	007a1200 	.word	0x007a1200
 80032f0:	003d0900 	.word	0x003d0900
 80032f4:	aaaaaaab 	.word	0xaaaaaaab

080032f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e01d      	b.n	8003346 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d106      	bne.n	8003324 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7fe fa7a 	bl	8001818 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3304      	adds	r3, #4
 8003334:	4619      	mov	r1, r3
 8003336:	4610      	mov	r0, r2
 8003338:	f000 f902 	bl	8003540 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
	...

08003350 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2201      	movs	r2, #1
 8003360:	6839      	ldr	r1, [r7, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f000 fad6 	bl	8003914 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a10      	ldr	r2, [pc, #64]	; (80033b0 <HAL_TIM_PWM_Start+0x60>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d107      	bne.n	8003382 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003380:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2b06      	cmp	r3, #6
 8003392:	d007      	beq.n	80033a4 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f042 0201 	orr.w	r2, r2, #1
 80033a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40012c00 	.word	0x40012c00

080033b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d101      	bne.n	80033ce <HAL_TIM_PWM_ConfigChannel+0x1a>
 80033ca:	2302      	movs	r3, #2
 80033cc:	e0b4      	b.n	8003538 <HAL_TIM_PWM_ConfigChannel+0x184>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2202      	movs	r2, #2
 80033da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b0c      	cmp	r3, #12
 80033e2:	f200 809f 	bhi.w	8003524 <HAL_TIM_PWM_ConfigChannel+0x170>
 80033e6:	a201      	add	r2, pc, #4	; (adr r2, 80033ec <HAL_TIM_PWM_ConfigChannel+0x38>)
 80033e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ec:	08003421 	.word	0x08003421
 80033f0:	08003525 	.word	0x08003525
 80033f4:	08003525 	.word	0x08003525
 80033f8:	08003525 	.word	0x08003525
 80033fc:	08003461 	.word	0x08003461
 8003400:	08003525 	.word	0x08003525
 8003404:	08003525 	.word	0x08003525
 8003408:	08003525 	.word	0x08003525
 800340c:	080034a3 	.word	0x080034a3
 8003410:	08003525 	.word	0x08003525
 8003414:	08003525 	.word	0x08003525
 8003418:	08003525 	.word	0x08003525
 800341c:	080034e3 	.word	0x080034e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68b9      	ldr	r1, [r7, #8]
 8003426:	4618      	mov	r0, r3
 8003428:	f000 f8ec 	bl	8003604 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	699a      	ldr	r2, [r3, #24]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0208 	orr.w	r2, r2, #8
 800343a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	699a      	ldr	r2, [r3, #24]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0204 	bic.w	r2, r2, #4
 800344a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6999      	ldr	r1, [r3, #24]
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	691a      	ldr	r2, [r3, #16]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	619a      	str	r2, [r3, #24]
      break;
 800345e:	e062      	b.n	8003526 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68b9      	ldr	r1, [r7, #8]
 8003466:	4618      	mov	r0, r3
 8003468:	f000 f932 	bl	80036d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	699a      	ldr	r2, [r3, #24]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800347a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	699a      	ldr	r2, [r3, #24]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800348a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6999      	ldr	r1, [r3, #24]
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	021a      	lsls	r2, r3, #8
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	619a      	str	r2, [r3, #24]
      break;
 80034a0:	e041      	b.n	8003526 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68b9      	ldr	r1, [r7, #8]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f000 f97b 	bl	80037a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	69da      	ldr	r2, [r3, #28]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f042 0208 	orr.w	r2, r2, #8
 80034bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	69da      	ldr	r2, [r3, #28]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0204 	bic.w	r2, r2, #4
 80034cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	69d9      	ldr	r1, [r3, #28]
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	691a      	ldr	r2, [r3, #16]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	61da      	str	r2, [r3, #28]
      break;
 80034e0:	e021      	b.n	8003526 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68b9      	ldr	r1, [r7, #8]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 f9c5 	bl	8003878 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	69da      	ldr	r2, [r3, #28]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	69da      	ldr	r2, [r3, #28]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800350c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	69d9      	ldr	r1, [r3, #28]
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	021a      	lsls	r2, r3, #8
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	61da      	str	r2, [r3, #28]
      break;
 8003522:	e000      	b.n	8003526 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003524:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a29      	ldr	r2, [pc, #164]	; (80035f8 <TIM_Base_SetConfig+0xb8>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d00b      	beq.n	8003570 <TIM_Base_SetConfig+0x30>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800355e:	d007      	beq.n	8003570 <TIM_Base_SetConfig+0x30>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a26      	ldr	r2, [pc, #152]	; (80035fc <TIM_Base_SetConfig+0xbc>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d003      	beq.n	8003570 <TIM_Base_SetConfig+0x30>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a25      	ldr	r2, [pc, #148]	; (8003600 <TIM_Base_SetConfig+0xc0>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d108      	bne.n	8003582 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003576:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	4313      	orrs	r3, r2
 8003580:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a1c      	ldr	r2, [pc, #112]	; (80035f8 <TIM_Base_SetConfig+0xb8>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d00b      	beq.n	80035a2 <TIM_Base_SetConfig+0x62>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003590:	d007      	beq.n	80035a2 <TIM_Base_SetConfig+0x62>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a19      	ldr	r2, [pc, #100]	; (80035fc <TIM_Base_SetConfig+0xbc>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d003      	beq.n	80035a2 <TIM_Base_SetConfig+0x62>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a18      	ldr	r2, [pc, #96]	; (8003600 <TIM_Base_SetConfig+0xc0>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d108      	bne.n	80035b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a07      	ldr	r2, [pc, #28]	; (80035f8 <TIM_Base_SetConfig+0xb8>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d103      	bne.n	80035e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	691a      	ldr	r2, [r3, #16]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	615a      	str	r2, [r3, #20]
}
 80035ee:	bf00      	nop
 80035f0:	3714      	adds	r7, #20
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr
 80035f8:	40012c00 	.word	0x40012c00
 80035fc:	40000400 	.word	0x40000400
 8003600:	40000800 	.word	0x40000800

08003604 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003604:	b480      	push	{r7}
 8003606:	b087      	sub	sp, #28
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	f023 0201 	bic.w	r2, r3, #1
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f023 0303 	bic.w	r3, r3, #3
 800363a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	4313      	orrs	r3, r2
 8003644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f023 0302 	bic.w	r3, r3, #2
 800364c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	4313      	orrs	r3, r2
 8003656:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a1c      	ldr	r2, [pc, #112]	; (80036cc <TIM_OC1_SetConfig+0xc8>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d10c      	bne.n	800367a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f023 0308 	bic.w	r3, r3, #8
 8003666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	4313      	orrs	r3, r2
 8003670:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f023 0304 	bic.w	r3, r3, #4
 8003678:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a13      	ldr	r2, [pc, #76]	; (80036cc <TIM_OC1_SetConfig+0xc8>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d111      	bne.n	80036a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003688:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003690:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	4313      	orrs	r3, r2
 800369a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	621a      	str	r2, [r3, #32]
}
 80036c0:	bf00      	nop
 80036c2:	371c      	adds	r7, #28
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bc80      	pop	{r7}
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	40012c00 	.word	0x40012c00

080036d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b087      	sub	sp, #28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	f023 0210 	bic.w	r2, r3, #16
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003706:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	021b      	lsls	r3, r3, #8
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	4313      	orrs	r3, r2
 8003712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	f023 0320 	bic.w	r3, r3, #32
 800371a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	4313      	orrs	r3, r2
 8003726:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a1d      	ldr	r2, [pc, #116]	; (80037a0 <TIM_OC2_SetConfig+0xd0>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d10d      	bne.n	800374c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003736:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	011b      	lsls	r3, r3, #4
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	4313      	orrs	r3, r2
 8003742:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800374a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a14      	ldr	r2, [pc, #80]	; (80037a0 <TIM_OC2_SetConfig+0xd0>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d113      	bne.n	800377c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800375a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003762:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	4313      	orrs	r3, r2
 800377a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	621a      	str	r2, [r3, #32]
}
 8003796:	bf00      	nop
 8003798:	371c      	adds	r7, #28
 800379a:	46bd      	mov	sp, r7
 800379c:	bc80      	pop	{r7}
 800379e:	4770      	bx	lr
 80037a0:	40012c00 	.word	0x40012c00

080037a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b087      	sub	sp, #28
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f023 0303 	bic.w	r3, r3, #3
 80037da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	021b      	lsls	r3, r3, #8
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a1d      	ldr	r2, [pc, #116]	; (8003874 <TIM_OC3_SetConfig+0xd0>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d10d      	bne.n	800381e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003808:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	021b      	lsls	r3, r3, #8
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	4313      	orrs	r3, r2
 8003814:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800381c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a14      	ldr	r2, [pc, #80]	; (8003874 <TIM_OC3_SetConfig+0xd0>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d113      	bne.n	800384e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800382c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003834:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	011b      	lsls	r3, r3, #4
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	4313      	orrs	r3, r2
 8003840:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	011b      	lsls	r3, r3, #4
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	4313      	orrs	r3, r2
 800384c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	621a      	str	r2, [r3, #32]
}
 8003868:	bf00      	nop
 800386a:	371c      	adds	r7, #28
 800386c:	46bd      	mov	sp, r7
 800386e:	bc80      	pop	{r7}
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	40012c00 	.word	0x40012c00

08003878 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003878:	b480      	push	{r7}
 800387a:	b087      	sub	sp, #28
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	021b      	lsls	r3, r3, #8
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	031b      	lsls	r3, r3, #12
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a0f      	ldr	r2, [pc, #60]	; (8003910 <TIM_OC4_SetConfig+0x98>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d109      	bne.n	80038ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	019b      	lsls	r3, r3, #6
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	621a      	str	r2, [r3, #32]
}
 8003906:	bf00      	nop
 8003908:	371c      	adds	r7, #28
 800390a:	46bd      	mov	sp, r7
 800390c:	bc80      	pop	{r7}
 800390e:	4770      	bx	lr
 8003910:	40012c00 	.word	0x40012c00

08003914 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003914:	b480      	push	{r7}
 8003916:	b087      	sub	sp, #28
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	f003 031f 	and.w	r3, r3, #31
 8003926:	2201      	movs	r2, #1
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6a1a      	ldr	r2, [r3, #32]
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	43db      	mvns	r3, r3
 8003936:	401a      	ands	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a1a      	ldr	r2, [r3, #32]
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	f003 031f 	and.w	r3, r3, #31
 8003946:	6879      	ldr	r1, [r7, #4]
 8003948:	fa01 f303 	lsl.w	r3, r1, r3
 800394c:	431a      	orrs	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	621a      	str	r2, [r3, #32]
}
 8003952:	bf00      	nop
 8003954:	371c      	adds	r7, #28
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr

0800395c <__errno>:
 800395c:	4b01      	ldr	r3, [pc, #4]	; (8003964 <__errno+0x8>)
 800395e:	6818      	ldr	r0, [r3, #0]
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	2000000c 	.word	0x2000000c

08003968 <__libc_init_array>:
 8003968:	b570      	push	{r4, r5, r6, lr}
 800396a:	2500      	movs	r5, #0
 800396c:	4e0c      	ldr	r6, [pc, #48]	; (80039a0 <__libc_init_array+0x38>)
 800396e:	4c0d      	ldr	r4, [pc, #52]	; (80039a4 <__libc_init_array+0x3c>)
 8003970:	1ba4      	subs	r4, r4, r6
 8003972:	10a4      	asrs	r4, r4, #2
 8003974:	42a5      	cmp	r5, r4
 8003976:	d109      	bne.n	800398c <__libc_init_array+0x24>
 8003978:	f001 f9f6 	bl	8004d68 <_init>
 800397c:	2500      	movs	r5, #0
 800397e:	4e0a      	ldr	r6, [pc, #40]	; (80039a8 <__libc_init_array+0x40>)
 8003980:	4c0a      	ldr	r4, [pc, #40]	; (80039ac <__libc_init_array+0x44>)
 8003982:	1ba4      	subs	r4, r4, r6
 8003984:	10a4      	asrs	r4, r4, #2
 8003986:	42a5      	cmp	r5, r4
 8003988:	d105      	bne.n	8003996 <__libc_init_array+0x2e>
 800398a:	bd70      	pop	{r4, r5, r6, pc}
 800398c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003990:	4798      	blx	r3
 8003992:	3501      	adds	r5, #1
 8003994:	e7ee      	b.n	8003974 <__libc_init_array+0xc>
 8003996:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800399a:	4798      	blx	r3
 800399c:	3501      	adds	r5, #1
 800399e:	e7f2      	b.n	8003986 <__libc_init_array+0x1e>
 80039a0:	08004fd0 	.word	0x08004fd0
 80039a4:	08004fd0 	.word	0x08004fd0
 80039a8:	08004fd0 	.word	0x08004fd0
 80039ac:	08004fd4 	.word	0x08004fd4

080039b0 <memset>:
 80039b0:	4603      	mov	r3, r0
 80039b2:	4402      	add	r2, r0
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d100      	bne.n	80039ba <memset+0xa>
 80039b8:	4770      	bx	lr
 80039ba:	f803 1b01 	strb.w	r1, [r3], #1
 80039be:	e7f9      	b.n	80039b4 <memset+0x4>

080039c0 <sin>:
 80039c0:	b530      	push	{r4, r5, lr}
 80039c2:	4a1a      	ldr	r2, [pc, #104]	; (8003a2c <sin+0x6c>)
 80039c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80039c8:	4293      	cmp	r3, r2
 80039ca:	b087      	sub	sp, #28
 80039cc:	dc06      	bgt.n	80039dc <sin+0x1c>
 80039ce:	2300      	movs	r3, #0
 80039d0:	2200      	movs	r2, #0
 80039d2:	9300      	str	r3, [sp, #0]
 80039d4:	2300      	movs	r3, #0
 80039d6:	f001 f807 	bl	80049e8 <__kernel_sin>
 80039da:	e006      	b.n	80039ea <sin+0x2a>
 80039dc:	4a14      	ldr	r2, [pc, #80]	; (8003a30 <sin+0x70>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	dd05      	ble.n	80039ee <sin+0x2e>
 80039e2:	4602      	mov	r2, r0
 80039e4:	460b      	mov	r3, r1
 80039e6:	f7fc fbb7 	bl	8000158 <__aeabi_dsub>
 80039ea:	b007      	add	sp, #28
 80039ec:	bd30      	pop	{r4, r5, pc}
 80039ee:	aa02      	add	r2, sp, #8
 80039f0:	f000 fa02 	bl	8003df8 <__ieee754_rem_pio2>
 80039f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80039f8:	f000 0403 	and.w	r4, r0, #3
 80039fc:	2c01      	cmp	r4, #1
 80039fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a02:	d005      	beq.n	8003a10 <sin+0x50>
 8003a04:	2c02      	cmp	r4, #2
 8003a06:	d006      	beq.n	8003a16 <sin+0x56>
 8003a08:	b964      	cbnz	r4, 8003a24 <sin+0x64>
 8003a0a:	2401      	movs	r4, #1
 8003a0c:	9400      	str	r4, [sp, #0]
 8003a0e:	e7e2      	b.n	80039d6 <sin+0x16>
 8003a10:	f000 fbe2 	bl	80041d8 <__kernel_cos>
 8003a14:	e7e9      	b.n	80039ea <sin+0x2a>
 8003a16:	2401      	movs	r4, #1
 8003a18:	9400      	str	r4, [sp, #0]
 8003a1a:	f000 ffe5 	bl	80049e8 <__kernel_sin>
 8003a1e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8003a22:	e7e2      	b.n	80039ea <sin+0x2a>
 8003a24:	f000 fbd8 	bl	80041d8 <__kernel_cos>
 8003a28:	e7f9      	b.n	8003a1e <sin+0x5e>
 8003a2a:	bf00      	nop
 8003a2c:	3fe921fb 	.word	0x3fe921fb
 8003a30:	7fefffff 	.word	0x7fefffff
 8003a34:	00000000 	.word	0x00000000

08003a38 <exp>:
 8003a38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a3c:	b08b      	sub	sp, #44	; 0x2c
 8003a3e:	4604      	mov	r4, r0
 8003a40:	460d      	mov	r5, r1
 8003a42:	f000 f871 	bl	8003b28 <__ieee754_exp>
 8003a46:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8003b24 <exp+0xec>
 8003a4a:	4606      	mov	r6, r0
 8003a4c:	f998 3000 	ldrsb.w	r3, [r8]
 8003a50:	460f      	mov	r7, r1
 8003a52:	3301      	adds	r3, #1
 8003a54:	d02c      	beq.n	8003ab0 <exp+0x78>
 8003a56:	4620      	mov	r0, r4
 8003a58:	4629      	mov	r1, r5
 8003a5a:	f001 f87f 	bl	8004b5c <finite>
 8003a5e:	b338      	cbz	r0, 8003ab0 <exp+0x78>
 8003a60:	a329      	add	r3, pc, #164	; (adr r3, 8003b08 <exp+0xd0>)
 8003a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a66:	4620      	mov	r0, r4
 8003a68:	4629      	mov	r1, r5
 8003a6a:	f7fc ffbd 	bl	80009e8 <__aeabi_dcmpgt>
 8003a6e:	4681      	mov	r9, r0
 8003a70:	2800      	cmp	r0, #0
 8003a72:	d02d      	beq.n	8003ad0 <exp+0x98>
 8003a74:	2303      	movs	r3, #3
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	4b27      	ldr	r3, [pc, #156]	; (8003b18 <exp+0xe0>)
 8003a7a:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8003a7e:	9301      	str	r3, [sp, #4]
 8003a80:	2300      	movs	r3, #0
 8003a82:	9308      	str	r3, [sp, #32]
 8003a84:	f998 3000 	ldrsb.w	r3, [r8]
 8003a88:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003a8c:	b9ab      	cbnz	r3, 8003aba <exp+0x82>
 8003a8e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003a92:	4b22      	ldr	r3, [pc, #136]	; (8003b1c <exp+0xe4>)
 8003a94:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003a98:	4668      	mov	r0, sp
 8003a9a:	f001 f8e9 	bl	8004c70 <matherr>
 8003a9e:	b190      	cbz	r0, 8003ac6 <exp+0x8e>
 8003aa0:	9b08      	ldr	r3, [sp, #32]
 8003aa2:	b11b      	cbz	r3, 8003aac <exp+0x74>
 8003aa4:	f7ff ff5a 	bl	800395c <__errno>
 8003aa8:	9b08      	ldr	r3, [sp, #32]
 8003aaa:	6003      	str	r3, [r0, #0]
 8003aac:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8003ab0:	4630      	mov	r0, r6
 8003ab2:	4639      	mov	r1, r7
 8003ab4:	b00b      	add	sp, #44	; 0x2c
 8003ab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003aba:	2000      	movs	r0, #0
 8003abc:	4918      	ldr	r1, [pc, #96]	; (8003b20 <exp+0xe8>)
 8003abe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d1e8      	bne.n	8003a98 <exp+0x60>
 8003ac6:	f7ff ff49 	bl	800395c <__errno>
 8003aca:	2322      	movs	r3, #34	; 0x22
 8003acc:	6003      	str	r3, [r0, #0]
 8003ace:	e7e7      	b.n	8003aa0 <exp+0x68>
 8003ad0:	a30f      	add	r3, pc, #60	; (adr r3, 8003b10 <exp+0xd8>)
 8003ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad6:	4620      	mov	r0, r4
 8003ad8:	4629      	mov	r1, r5
 8003ada:	f7fc ff67 	bl	80009ac <__aeabi_dcmplt>
 8003ade:	2800      	cmp	r0, #0
 8003ae0:	d0e6      	beq.n	8003ab0 <exp+0x78>
 8003ae2:	2304      	movs	r3, #4
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	4b0c      	ldr	r3, [pc, #48]	; (8003b18 <exp+0xe0>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	9301      	str	r3, [sp, #4]
 8003aec:	2300      	movs	r3, #0
 8003aee:	f8cd 9020 	str.w	r9, [sp, #32]
 8003af2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003af6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8003afa:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003afe:	f998 3000 	ldrsb.w	r3, [r8]
 8003b02:	e7de      	b.n	8003ac2 <exp+0x8a>
 8003b04:	f3af 8000 	nop.w
 8003b08:	fefa39ef 	.word	0xfefa39ef
 8003b0c:	40862e42 	.word	0x40862e42
 8003b10:	d52d3051 	.word	0xd52d3051
 8003b14:	c0874910 	.word	0xc0874910
 8003b18:	08004dc0 	.word	0x08004dc0
 8003b1c:	47efffff 	.word	0x47efffff
 8003b20:	7ff00000 	.word	0x7ff00000
 8003b24:	20000070 	.word	0x20000070

08003b28 <__ieee754_exp>:
 8003b28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b2c:	4aa8      	ldr	r2, [pc, #672]	; (8003dd0 <__ieee754_exp+0x2a8>)
 8003b2e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8003b32:	4296      	cmp	r6, r2
 8003b34:	4605      	mov	r5, r0
 8003b36:	460c      	mov	r4, r1
 8003b38:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 8003b3c:	d92c      	bls.n	8003b98 <__ieee754_exp+0x70>
 8003b3e:	4aa5      	ldr	r2, [pc, #660]	; (8003dd4 <__ieee754_exp+0x2ac>)
 8003b40:	4296      	cmp	r6, r2
 8003b42:	d910      	bls.n	8003b66 <__ieee754_exp+0x3e>
 8003b44:	f3c1 0313 	ubfx	r3, r1, #0, #20
 8003b48:	4303      	orrs	r3, r0
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	d005      	beq.n	8003b5a <__ieee754_exp+0x32>
 8003b4e:	460b      	mov	r3, r1
 8003b50:	f7fc fb04 	bl	800015c <__adddf3>
 8003b54:	4605      	mov	r5, r0
 8003b56:	460c      	mov	r4, r1
 8003b58:	e000      	b.n	8003b5c <__ieee754_exp+0x34>
 8003b5a:	b9d7      	cbnz	r7, 8003b92 <__ieee754_exp+0x6a>
 8003b5c:	4628      	mov	r0, r5
 8003b5e:	4621      	mov	r1, r4
 8003b60:	b004      	add	sp, #16
 8003b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b66:	a384      	add	r3, pc, #528	; (adr r3, 8003d78 <__ieee754_exp+0x250>)
 8003b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6c:	f7fc ff3c 	bl	80009e8 <__aeabi_dcmpgt>
 8003b70:	b138      	cbz	r0, 8003b82 <__ieee754_exp+0x5a>
 8003b72:	a383      	add	r3, pc, #524	; (adr r3, 8003d80 <__ieee754_exp+0x258>)
 8003b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b78:	4610      	mov	r0, r2
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	f7fc fca4 	bl	80004c8 <__aeabi_dmul>
 8003b80:	e7e8      	b.n	8003b54 <__ieee754_exp+0x2c>
 8003b82:	a381      	add	r3, pc, #516	; (adr r3, 8003d88 <__ieee754_exp+0x260>)
 8003b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b88:	4628      	mov	r0, r5
 8003b8a:	4621      	mov	r1, r4
 8003b8c:	f7fc ff0e 	bl	80009ac <__aeabi_dcmplt>
 8003b90:	b130      	cbz	r0, 8003ba0 <__ieee754_exp+0x78>
 8003b92:	2500      	movs	r5, #0
 8003b94:	462c      	mov	r4, r5
 8003b96:	e7e1      	b.n	8003b5c <__ieee754_exp+0x34>
 8003b98:	4b8f      	ldr	r3, [pc, #572]	; (8003dd8 <__ieee754_exp+0x2b0>)
 8003b9a:	429e      	cmp	r6, r3
 8003b9c:	f240 80a6 	bls.w	8003cec <__ieee754_exp+0x1c4>
 8003ba0:	4b8e      	ldr	r3, [pc, #568]	; (8003ddc <__ieee754_exp+0x2b4>)
 8003ba2:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 8003ba6:	429e      	cmp	r6, r3
 8003ba8:	d875      	bhi.n	8003c96 <__ieee754_exp+0x16e>
 8003baa:	4b8d      	ldr	r3, [pc, #564]	; (8003de0 <__ieee754_exp+0x2b8>)
 8003bac:	4628      	mov	r0, r5
 8003bae:	4443      	add	r3, r8
 8003bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb4:	4621      	mov	r1, r4
 8003bb6:	f7fc facf 	bl	8000158 <__aeabi_dsub>
 8003bba:	4e8a      	ldr	r6, [pc, #552]	; (8003de4 <__ieee754_exp+0x2bc>)
 8003bbc:	e9cd 0100 	strd	r0, r1, [sp]
 8003bc0:	f1c7 0a01 	rsb	sl, r7, #1
 8003bc4:	4446      	add	r6, r8
 8003bc6:	ebaa 0a07 	sub.w	sl, sl, r7
 8003bca:	e9d6 8900 	ldrd	r8, r9, [r6]
 8003bce:	4642      	mov	r2, r8
 8003bd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003bd4:	464b      	mov	r3, r9
 8003bd6:	f7fc fabf 	bl	8000158 <__aeabi_dsub>
 8003bda:	4605      	mov	r5, r0
 8003bdc:	460c      	mov	r4, r1
 8003bde:	462a      	mov	r2, r5
 8003be0:	4623      	mov	r3, r4
 8003be2:	4628      	mov	r0, r5
 8003be4:	4621      	mov	r1, r4
 8003be6:	f7fc fc6f 	bl	80004c8 <__aeabi_dmul>
 8003bea:	a369      	add	r3, pc, #420	; (adr r3, 8003d90 <__ieee754_exp+0x268>)
 8003bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf0:	4606      	mov	r6, r0
 8003bf2:	460f      	mov	r7, r1
 8003bf4:	f7fc fc68 	bl	80004c8 <__aeabi_dmul>
 8003bf8:	a367      	add	r3, pc, #412	; (adr r3, 8003d98 <__ieee754_exp+0x270>)
 8003bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfe:	f7fc faab 	bl	8000158 <__aeabi_dsub>
 8003c02:	4632      	mov	r2, r6
 8003c04:	463b      	mov	r3, r7
 8003c06:	f7fc fc5f 	bl	80004c8 <__aeabi_dmul>
 8003c0a:	a365      	add	r3, pc, #404	; (adr r3, 8003da0 <__ieee754_exp+0x278>)
 8003c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c10:	f7fc faa4 	bl	800015c <__adddf3>
 8003c14:	4632      	mov	r2, r6
 8003c16:	463b      	mov	r3, r7
 8003c18:	f7fc fc56 	bl	80004c8 <__aeabi_dmul>
 8003c1c:	a362      	add	r3, pc, #392	; (adr r3, 8003da8 <__ieee754_exp+0x280>)
 8003c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c22:	f7fc fa99 	bl	8000158 <__aeabi_dsub>
 8003c26:	4632      	mov	r2, r6
 8003c28:	463b      	mov	r3, r7
 8003c2a:	f7fc fc4d 	bl	80004c8 <__aeabi_dmul>
 8003c2e:	a360      	add	r3, pc, #384	; (adr r3, 8003db0 <__ieee754_exp+0x288>)
 8003c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c34:	f7fc fa92 	bl	800015c <__adddf3>
 8003c38:	4632      	mov	r2, r6
 8003c3a:	463b      	mov	r3, r7
 8003c3c:	f7fc fc44 	bl	80004c8 <__aeabi_dmul>
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4628      	mov	r0, r5
 8003c46:	4621      	mov	r1, r4
 8003c48:	f7fc fa86 	bl	8000158 <__aeabi_dsub>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	460b      	mov	r3, r1
 8003c50:	4606      	mov	r6, r0
 8003c52:	460f      	mov	r7, r1
 8003c54:	4628      	mov	r0, r5
 8003c56:	4621      	mov	r1, r4
 8003c58:	f7fc fc36 	bl	80004c8 <__aeabi_dmul>
 8003c5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c60:	f1ba 0f00 	cmp.w	sl, #0
 8003c64:	d159      	bne.n	8003d1a <__ieee754_exp+0x1f2>
 8003c66:	2200      	movs	r2, #0
 8003c68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c6c:	4630      	mov	r0, r6
 8003c6e:	4639      	mov	r1, r7
 8003c70:	f7fc fa72 	bl	8000158 <__aeabi_dsub>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c7c:	f7fc fd4e 	bl	800071c <__aeabi_ddiv>
 8003c80:	462a      	mov	r2, r5
 8003c82:	4623      	mov	r3, r4
 8003c84:	f7fc fa68 	bl	8000158 <__aeabi_dsub>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	2000      	movs	r0, #0
 8003c8e:	4956      	ldr	r1, [pc, #344]	; (8003de8 <__ieee754_exp+0x2c0>)
 8003c90:	f7fc fa62 	bl	8000158 <__aeabi_dsub>
 8003c94:	e75e      	b.n	8003b54 <__ieee754_exp+0x2c>
 8003c96:	4e55      	ldr	r6, [pc, #340]	; (8003dec <__ieee754_exp+0x2c4>)
 8003c98:	a347      	add	r3, pc, #284	; (adr r3, 8003db8 <__ieee754_exp+0x290>)
 8003c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9e:	4446      	add	r6, r8
 8003ca0:	4628      	mov	r0, r5
 8003ca2:	4621      	mov	r1, r4
 8003ca4:	f7fc fc10 	bl	80004c8 <__aeabi_dmul>
 8003ca8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003cac:	f7fc fa56 	bl	800015c <__adddf3>
 8003cb0:	f7fc fea4 	bl	80009fc <__aeabi_d2iz>
 8003cb4:	4682      	mov	sl, r0
 8003cb6:	f7fc fb9d 	bl	80003f4 <__aeabi_i2d>
 8003cba:	a341      	add	r3, pc, #260	; (adr r3, 8003dc0 <__ieee754_exp+0x298>)
 8003cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc0:	4606      	mov	r6, r0
 8003cc2:	460f      	mov	r7, r1
 8003cc4:	f7fc fc00 	bl	80004c8 <__aeabi_dmul>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	460b      	mov	r3, r1
 8003ccc:	4628      	mov	r0, r5
 8003cce:	4621      	mov	r1, r4
 8003cd0:	f7fc fa42 	bl	8000158 <__aeabi_dsub>
 8003cd4:	a33c      	add	r3, pc, #240	; (adr r3, 8003dc8 <__ieee754_exp+0x2a0>)
 8003cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cda:	e9cd 0100 	strd	r0, r1, [sp]
 8003cde:	4630      	mov	r0, r6
 8003ce0:	4639      	mov	r1, r7
 8003ce2:	f7fc fbf1 	bl	80004c8 <__aeabi_dmul>
 8003ce6:	4680      	mov	r8, r0
 8003ce8:	4689      	mov	r9, r1
 8003cea:	e770      	b.n	8003bce <__ieee754_exp+0xa6>
 8003cec:	4b40      	ldr	r3, [pc, #256]	; (8003df0 <__ieee754_exp+0x2c8>)
 8003cee:	429e      	cmp	r6, r3
 8003cf0:	d80e      	bhi.n	8003d10 <__ieee754_exp+0x1e8>
 8003cf2:	a323      	add	r3, pc, #140	; (adr r3, 8003d80 <__ieee754_exp+0x258>)
 8003cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf8:	f7fc fa30 	bl	800015c <__adddf3>
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	4b3a      	ldr	r3, [pc, #232]	; (8003de8 <__ieee754_exp+0x2c0>)
 8003d00:	f7fc fe72 	bl	80009e8 <__aeabi_dcmpgt>
 8003d04:	b138      	cbz	r0, 8003d16 <__ieee754_exp+0x1ee>
 8003d06:	2200      	movs	r2, #0
 8003d08:	4b37      	ldr	r3, [pc, #220]	; (8003de8 <__ieee754_exp+0x2c0>)
 8003d0a:	4628      	mov	r0, r5
 8003d0c:	4621      	mov	r1, r4
 8003d0e:	e71f      	b.n	8003b50 <__ieee754_exp+0x28>
 8003d10:	f04f 0a00 	mov.w	sl, #0
 8003d14:	e763      	b.n	8003bde <__ieee754_exp+0xb6>
 8003d16:	4682      	mov	sl, r0
 8003d18:	e761      	b.n	8003bde <__ieee754_exp+0xb6>
 8003d1a:	4632      	mov	r2, r6
 8003d1c:	463b      	mov	r3, r7
 8003d1e:	2000      	movs	r0, #0
 8003d20:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003d24:	f7fc fa18 	bl	8000158 <__aeabi_dsub>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d30:	f7fc fcf4 	bl	800071c <__aeabi_ddiv>
 8003d34:	4602      	mov	r2, r0
 8003d36:	460b      	mov	r3, r1
 8003d38:	4640      	mov	r0, r8
 8003d3a:	4649      	mov	r1, r9
 8003d3c:	f7fc fa0c 	bl	8000158 <__aeabi_dsub>
 8003d40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003d44:	f7fc fa08 	bl	8000158 <__aeabi_dsub>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	2000      	movs	r0, #0
 8003d4e:	4926      	ldr	r1, [pc, #152]	; (8003de8 <__ieee754_exp+0x2c0>)
 8003d50:	f7fc fa02 	bl	8000158 <__aeabi_dsub>
 8003d54:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8003d58:	4592      	cmp	sl, r2
 8003d5a:	db02      	blt.n	8003d62 <__ieee754_exp+0x23a>
 8003d5c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8003d60:	e6f8      	b.n	8003b54 <__ieee754_exp+0x2c>
 8003d62:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8003d66:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8003d70:	e704      	b.n	8003b7c <__ieee754_exp+0x54>
 8003d72:	bf00      	nop
 8003d74:	f3af 8000 	nop.w
 8003d78:	fefa39ef 	.word	0xfefa39ef
 8003d7c:	40862e42 	.word	0x40862e42
 8003d80:	8800759c 	.word	0x8800759c
 8003d84:	7e37e43c 	.word	0x7e37e43c
 8003d88:	d52d3051 	.word	0xd52d3051
 8003d8c:	c0874910 	.word	0xc0874910
 8003d90:	72bea4d0 	.word	0x72bea4d0
 8003d94:	3e663769 	.word	0x3e663769
 8003d98:	c5d26bf1 	.word	0xc5d26bf1
 8003d9c:	3ebbbd41 	.word	0x3ebbbd41
 8003da0:	af25de2c 	.word	0xaf25de2c
 8003da4:	3f11566a 	.word	0x3f11566a
 8003da8:	16bebd93 	.word	0x16bebd93
 8003dac:	3f66c16c 	.word	0x3f66c16c
 8003db0:	5555553e 	.word	0x5555553e
 8003db4:	3fc55555 	.word	0x3fc55555
 8003db8:	652b82fe 	.word	0x652b82fe
 8003dbc:	3ff71547 	.word	0x3ff71547
 8003dc0:	fee00000 	.word	0xfee00000
 8003dc4:	3fe62e42 	.word	0x3fe62e42
 8003dc8:	35793c76 	.word	0x35793c76
 8003dcc:	3dea39ef 	.word	0x3dea39ef
 8003dd0:	40862e41 	.word	0x40862e41
 8003dd4:	7fefffff 	.word	0x7fefffff
 8003dd8:	3fd62e42 	.word	0x3fd62e42
 8003ddc:	3ff0a2b1 	.word	0x3ff0a2b1
 8003de0:	08004dd8 	.word	0x08004dd8
 8003de4:	08004de8 	.word	0x08004de8
 8003de8:	3ff00000 	.word	0x3ff00000
 8003dec:	08004dc8 	.word	0x08004dc8
 8003df0:	3e2fffff 	.word	0x3e2fffff
 8003df4:	00000000 	.word	0x00000000

08003df8 <__ieee754_rem_pio2>:
 8003df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dfc:	4614      	mov	r4, r2
 8003dfe:	4ac2      	ldr	r2, [pc, #776]	; (8004108 <__ieee754_rem_pio2+0x310>)
 8003e00:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8003e04:	4592      	cmp	sl, r2
 8003e06:	b08d      	sub	sp, #52	; 0x34
 8003e08:	468b      	mov	fp, r1
 8003e0a:	dc07      	bgt.n	8003e1c <__ieee754_rem_pio2+0x24>
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	2300      	movs	r3, #0
 8003e10:	e9c4 0100 	strd	r0, r1, [r4]
 8003e14:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8003e18:	2500      	movs	r5, #0
 8003e1a:	e023      	b.n	8003e64 <__ieee754_rem_pio2+0x6c>
 8003e1c:	4abb      	ldr	r2, [pc, #748]	; (800410c <__ieee754_rem_pio2+0x314>)
 8003e1e:	4592      	cmp	sl, r2
 8003e20:	dc71      	bgt.n	8003f06 <__ieee754_rem_pio2+0x10e>
 8003e22:	a3ab      	add	r3, pc, #684	; (adr r3, 80040d0 <__ieee754_rem_pio2+0x2d8>)
 8003e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e28:	2900      	cmp	r1, #0
 8003e2a:	4db9      	ldr	r5, [pc, #740]	; (8004110 <__ieee754_rem_pio2+0x318>)
 8003e2c:	dd36      	ble.n	8003e9c <__ieee754_rem_pio2+0xa4>
 8003e2e:	f7fc f993 	bl	8000158 <__aeabi_dsub>
 8003e32:	45aa      	cmp	sl, r5
 8003e34:	4606      	mov	r6, r0
 8003e36:	460f      	mov	r7, r1
 8003e38:	d018      	beq.n	8003e6c <__ieee754_rem_pio2+0x74>
 8003e3a:	a3a7      	add	r3, pc, #668	; (adr r3, 80040d8 <__ieee754_rem_pio2+0x2e0>)
 8003e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e40:	f7fc f98a 	bl	8000158 <__aeabi_dsub>
 8003e44:	4602      	mov	r2, r0
 8003e46:	460b      	mov	r3, r1
 8003e48:	4630      	mov	r0, r6
 8003e4a:	e9c4 2300 	strd	r2, r3, [r4]
 8003e4e:	4639      	mov	r1, r7
 8003e50:	f7fc f982 	bl	8000158 <__aeabi_dsub>
 8003e54:	a3a0      	add	r3, pc, #640	; (adr r3, 80040d8 <__ieee754_rem_pio2+0x2e0>)
 8003e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5a:	f7fc f97d 	bl	8000158 <__aeabi_dsub>
 8003e5e:	2501      	movs	r5, #1
 8003e60:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003e64:	4628      	mov	r0, r5
 8003e66:	b00d      	add	sp, #52	; 0x34
 8003e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e6c:	a39c      	add	r3, pc, #624	; (adr r3, 80040e0 <__ieee754_rem_pio2+0x2e8>)
 8003e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e72:	f7fc f971 	bl	8000158 <__aeabi_dsub>
 8003e76:	a39c      	add	r3, pc, #624	; (adr r3, 80040e8 <__ieee754_rem_pio2+0x2f0>)
 8003e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e7c:	4606      	mov	r6, r0
 8003e7e:	460f      	mov	r7, r1
 8003e80:	f7fc f96a 	bl	8000158 <__aeabi_dsub>
 8003e84:	4602      	mov	r2, r0
 8003e86:	460b      	mov	r3, r1
 8003e88:	4630      	mov	r0, r6
 8003e8a:	e9c4 2300 	strd	r2, r3, [r4]
 8003e8e:	4639      	mov	r1, r7
 8003e90:	f7fc f962 	bl	8000158 <__aeabi_dsub>
 8003e94:	a394      	add	r3, pc, #592	; (adr r3, 80040e8 <__ieee754_rem_pio2+0x2f0>)
 8003e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9a:	e7de      	b.n	8003e5a <__ieee754_rem_pio2+0x62>
 8003e9c:	f7fc f95e 	bl	800015c <__adddf3>
 8003ea0:	45aa      	cmp	sl, r5
 8003ea2:	4606      	mov	r6, r0
 8003ea4:	460f      	mov	r7, r1
 8003ea6:	d016      	beq.n	8003ed6 <__ieee754_rem_pio2+0xde>
 8003ea8:	a38b      	add	r3, pc, #556	; (adr r3, 80040d8 <__ieee754_rem_pio2+0x2e0>)
 8003eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eae:	f7fc f955 	bl	800015c <__adddf3>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	4630      	mov	r0, r6
 8003eb8:	e9c4 2300 	strd	r2, r3, [r4]
 8003ebc:	4639      	mov	r1, r7
 8003ebe:	f7fc f94b 	bl	8000158 <__aeabi_dsub>
 8003ec2:	a385      	add	r3, pc, #532	; (adr r3, 80040d8 <__ieee754_rem_pio2+0x2e0>)
 8003ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec8:	f7fc f948 	bl	800015c <__adddf3>
 8003ecc:	f04f 35ff 	mov.w	r5, #4294967295
 8003ed0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003ed4:	e7c6      	b.n	8003e64 <__ieee754_rem_pio2+0x6c>
 8003ed6:	a382      	add	r3, pc, #520	; (adr r3, 80040e0 <__ieee754_rem_pio2+0x2e8>)
 8003ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003edc:	f7fc f93e 	bl	800015c <__adddf3>
 8003ee0:	a381      	add	r3, pc, #516	; (adr r3, 80040e8 <__ieee754_rem_pio2+0x2f0>)
 8003ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee6:	4606      	mov	r6, r0
 8003ee8:	460f      	mov	r7, r1
 8003eea:	f7fc f937 	bl	800015c <__adddf3>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	4630      	mov	r0, r6
 8003ef4:	e9c4 2300 	strd	r2, r3, [r4]
 8003ef8:	4639      	mov	r1, r7
 8003efa:	f7fc f92d 	bl	8000158 <__aeabi_dsub>
 8003efe:	a37a      	add	r3, pc, #488	; (adr r3, 80040e8 <__ieee754_rem_pio2+0x2f0>)
 8003f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f04:	e7e0      	b.n	8003ec8 <__ieee754_rem_pio2+0xd0>
 8003f06:	4a83      	ldr	r2, [pc, #524]	; (8004114 <__ieee754_rem_pio2+0x31c>)
 8003f08:	4592      	cmp	sl, r2
 8003f0a:	f300 80d2 	bgt.w	80040b2 <__ieee754_rem_pio2+0x2ba>
 8003f0e:	f000 fe21 	bl	8004b54 <fabs>
 8003f12:	a377      	add	r3, pc, #476	; (adr r3, 80040f0 <__ieee754_rem_pio2+0x2f8>)
 8003f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f18:	4606      	mov	r6, r0
 8003f1a:	460f      	mov	r7, r1
 8003f1c:	f7fc fad4 	bl	80004c8 <__aeabi_dmul>
 8003f20:	2200      	movs	r2, #0
 8003f22:	4b7d      	ldr	r3, [pc, #500]	; (8004118 <__ieee754_rem_pio2+0x320>)
 8003f24:	f7fc f91a 	bl	800015c <__adddf3>
 8003f28:	f7fc fd68 	bl	80009fc <__aeabi_d2iz>
 8003f2c:	4605      	mov	r5, r0
 8003f2e:	f7fc fa61 	bl	80003f4 <__aeabi_i2d>
 8003f32:	a367      	add	r3, pc, #412	; (adr r3, 80040d0 <__ieee754_rem_pio2+0x2d8>)
 8003f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f3c:	f7fc fac4 	bl	80004c8 <__aeabi_dmul>
 8003f40:	4602      	mov	r2, r0
 8003f42:	460b      	mov	r3, r1
 8003f44:	4630      	mov	r0, r6
 8003f46:	4639      	mov	r1, r7
 8003f48:	f7fc f906 	bl	8000158 <__aeabi_dsub>
 8003f4c:	a362      	add	r3, pc, #392	; (adr r3, 80040d8 <__ieee754_rem_pio2+0x2e0>)
 8003f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f52:	4606      	mov	r6, r0
 8003f54:	460f      	mov	r7, r1
 8003f56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f5a:	f7fc fab5 	bl	80004c8 <__aeabi_dmul>
 8003f5e:	2d1f      	cmp	r5, #31
 8003f60:	4680      	mov	r8, r0
 8003f62:	4689      	mov	r9, r1
 8003f64:	dc0e      	bgt.n	8003f84 <__ieee754_rem_pio2+0x18c>
 8003f66:	4b6d      	ldr	r3, [pc, #436]	; (800411c <__ieee754_rem_pio2+0x324>)
 8003f68:	1e6a      	subs	r2, r5, #1
 8003f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f6e:	4553      	cmp	r3, sl
 8003f70:	d008      	beq.n	8003f84 <__ieee754_rem_pio2+0x18c>
 8003f72:	4642      	mov	r2, r8
 8003f74:	464b      	mov	r3, r9
 8003f76:	4630      	mov	r0, r6
 8003f78:	4639      	mov	r1, r7
 8003f7a:	f7fc f8ed 	bl	8000158 <__aeabi_dsub>
 8003f7e:	e9c4 0100 	strd	r0, r1, [r4]
 8003f82:	e011      	b.n	8003fa8 <__ieee754_rem_pio2+0x1b0>
 8003f84:	464b      	mov	r3, r9
 8003f86:	4642      	mov	r2, r8
 8003f88:	4630      	mov	r0, r6
 8003f8a:	4639      	mov	r1, r7
 8003f8c:	f7fc f8e4 	bl	8000158 <__aeabi_dsub>
 8003f90:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8003f94:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003f98:	ebaa 0303 	sub.w	r3, sl, r3
 8003f9c:	2b10      	cmp	r3, #16
 8003f9e:	dc1f      	bgt.n	8003fe0 <__ieee754_rem_pio2+0x1e8>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	e9c4 2300 	strd	r2, r3, [r4]
 8003fa8:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8003fac:	4630      	mov	r0, r6
 8003fae:	4653      	mov	r3, sl
 8003fb0:	4639      	mov	r1, r7
 8003fb2:	f7fc f8d1 	bl	8000158 <__aeabi_dsub>
 8003fb6:	4642      	mov	r2, r8
 8003fb8:	464b      	mov	r3, r9
 8003fba:	f7fc f8cd 	bl	8000158 <__aeabi_dsub>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	f1bb 0f00 	cmp.w	fp, #0
 8003fc6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8003fca:	f6bf af4b 	bge.w	8003e64 <__ieee754_rem_pio2+0x6c>
 8003fce:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8003fd2:	e9c4 3001 	strd	r3, r0, [r4, #4]
 8003fd6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8003fda:	60e1      	str	r1, [r4, #12]
 8003fdc:	426d      	negs	r5, r5
 8003fde:	e741      	b.n	8003e64 <__ieee754_rem_pio2+0x6c>
 8003fe0:	a33f      	add	r3, pc, #252	; (adr r3, 80040e0 <__ieee754_rem_pio2+0x2e8>)
 8003fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fea:	f7fc fa6d 	bl	80004c8 <__aeabi_dmul>
 8003fee:	4680      	mov	r8, r0
 8003ff0:	4689      	mov	r9, r1
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	4630      	mov	r0, r6
 8003ff8:	4639      	mov	r1, r7
 8003ffa:	f7fc f8ad 	bl	8000158 <__aeabi_dsub>
 8003ffe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004002:	4602      	mov	r2, r0
 8004004:	460b      	mov	r3, r1
 8004006:	4630      	mov	r0, r6
 8004008:	4639      	mov	r1, r7
 800400a:	f7fc f8a5 	bl	8000158 <__aeabi_dsub>
 800400e:	4642      	mov	r2, r8
 8004010:	464b      	mov	r3, r9
 8004012:	f7fc f8a1 	bl	8000158 <__aeabi_dsub>
 8004016:	a334      	add	r3, pc, #208	; (adr r3, 80040e8 <__ieee754_rem_pio2+0x2f0>)
 8004018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401c:	4606      	mov	r6, r0
 800401e:	460f      	mov	r7, r1
 8004020:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004024:	f7fc fa50 	bl	80004c8 <__aeabi_dmul>
 8004028:	4632      	mov	r2, r6
 800402a:	463b      	mov	r3, r7
 800402c:	f7fc f894 	bl	8000158 <__aeabi_dsub>
 8004030:	460b      	mov	r3, r1
 8004032:	4602      	mov	r2, r0
 8004034:	4680      	mov	r8, r0
 8004036:	4689      	mov	r9, r1
 8004038:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800403c:	f7fc f88c 	bl	8000158 <__aeabi_dsub>
 8004040:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004044:	ebaa 0a03 	sub.w	sl, sl, r3
 8004048:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800404c:	dc06      	bgt.n	800405c <__ieee754_rem_pio2+0x264>
 800404e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8004052:	4602      	mov	r2, r0
 8004054:	460b      	mov	r3, r1
 8004056:	e9c4 2300 	strd	r2, r3, [r4]
 800405a:	e7a5      	b.n	8003fa8 <__ieee754_rem_pio2+0x1b0>
 800405c:	a326      	add	r3, pc, #152	; (adr r3, 80040f8 <__ieee754_rem_pio2+0x300>)
 800405e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004062:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004066:	f7fc fa2f 	bl	80004c8 <__aeabi_dmul>
 800406a:	4680      	mov	r8, r0
 800406c:	4689      	mov	r9, r1
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004076:	f7fc f86f 	bl	8000158 <__aeabi_dsub>
 800407a:	4602      	mov	r2, r0
 800407c:	460b      	mov	r3, r1
 800407e:	4606      	mov	r6, r0
 8004080:	460f      	mov	r7, r1
 8004082:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004086:	f7fc f867 	bl	8000158 <__aeabi_dsub>
 800408a:	4642      	mov	r2, r8
 800408c:	464b      	mov	r3, r9
 800408e:	f7fc f863 	bl	8000158 <__aeabi_dsub>
 8004092:	a31b      	add	r3, pc, #108	; (adr r3, 8004100 <__ieee754_rem_pio2+0x308>)
 8004094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004098:	4680      	mov	r8, r0
 800409a:	4689      	mov	r9, r1
 800409c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040a0:	f7fc fa12 	bl	80004c8 <__aeabi_dmul>
 80040a4:	4642      	mov	r2, r8
 80040a6:	464b      	mov	r3, r9
 80040a8:	f7fc f856 	bl	8000158 <__aeabi_dsub>
 80040ac:	4680      	mov	r8, r0
 80040ae:	4689      	mov	r9, r1
 80040b0:	e75f      	b.n	8003f72 <__ieee754_rem_pio2+0x17a>
 80040b2:	4a1b      	ldr	r2, [pc, #108]	; (8004120 <__ieee754_rem_pio2+0x328>)
 80040b4:	4592      	cmp	sl, r2
 80040b6:	dd35      	ble.n	8004124 <__ieee754_rem_pio2+0x32c>
 80040b8:	4602      	mov	r2, r0
 80040ba:	460b      	mov	r3, r1
 80040bc:	f7fc f84c 	bl	8000158 <__aeabi_dsub>
 80040c0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80040c4:	e9c4 0100 	strd	r0, r1, [r4]
 80040c8:	e6a6      	b.n	8003e18 <__ieee754_rem_pio2+0x20>
 80040ca:	bf00      	nop
 80040cc:	f3af 8000 	nop.w
 80040d0:	54400000 	.word	0x54400000
 80040d4:	3ff921fb 	.word	0x3ff921fb
 80040d8:	1a626331 	.word	0x1a626331
 80040dc:	3dd0b461 	.word	0x3dd0b461
 80040e0:	1a600000 	.word	0x1a600000
 80040e4:	3dd0b461 	.word	0x3dd0b461
 80040e8:	2e037073 	.word	0x2e037073
 80040ec:	3ba3198a 	.word	0x3ba3198a
 80040f0:	6dc9c883 	.word	0x6dc9c883
 80040f4:	3fe45f30 	.word	0x3fe45f30
 80040f8:	2e000000 	.word	0x2e000000
 80040fc:	3ba3198a 	.word	0x3ba3198a
 8004100:	252049c1 	.word	0x252049c1
 8004104:	397b839a 	.word	0x397b839a
 8004108:	3fe921fb 	.word	0x3fe921fb
 800410c:	4002d97b 	.word	0x4002d97b
 8004110:	3ff921fb 	.word	0x3ff921fb
 8004114:	413921fb 	.word	0x413921fb
 8004118:	3fe00000 	.word	0x3fe00000
 800411c:	08004df8 	.word	0x08004df8
 8004120:	7fefffff 	.word	0x7fefffff
 8004124:	ea4f 552a 	mov.w	r5, sl, asr #20
 8004128:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800412c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8004130:	460f      	mov	r7, r1
 8004132:	4606      	mov	r6, r0
 8004134:	f7fc fc62 	bl	80009fc <__aeabi_d2iz>
 8004138:	f7fc f95c 	bl	80003f4 <__aeabi_i2d>
 800413c:	4602      	mov	r2, r0
 800413e:	460b      	mov	r3, r1
 8004140:	4630      	mov	r0, r6
 8004142:	4639      	mov	r1, r7
 8004144:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004148:	f7fc f806 	bl	8000158 <__aeabi_dsub>
 800414c:	2200      	movs	r2, #0
 800414e:	4b20      	ldr	r3, [pc, #128]	; (80041d0 <__ieee754_rem_pio2+0x3d8>)
 8004150:	f7fc f9ba 	bl	80004c8 <__aeabi_dmul>
 8004154:	460f      	mov	r7, r1
 8004156:	4606      	mov	r6, r0
 8004158:	f7fc fc50 	bl	80009fc <__aeabi_d2iz>
 800415c:	f7fc f94a 	bl	80003f4 <__aeabi_i2d>
 8004160:	4602      	mov	r2, r0
 8004162:	460b      	mov	r3, r1
 8004164:	4630      	mov	r0, r6
 8004166:	4639      	mov	r1, r7
 8004168:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800416c:	f7fb fff4 	bl	8000158 <__aeabi_dsub>
 8004170:	2200      	movs	r2, #0
 8004172:	4b17      	ldr	r3, [pc, #92]	; (80041d0 <__ieee754_rem_pio2+0x3d8>)
 8004174:	f7fc f9a8 	bl	80004c8 <__aeabi_dmul>
 8004178:	f04f 0803 	mov.w	r8, #3
 800417c:	2600      	movs	r6, #0
 800417e:	2700      	movs	r7, #0
 8004180:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004184:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8004188:	4632      	mov	r2, r6
 800418a:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800418e:	463b      	mov	r3, r7
 8004190:	f108 3aff 	add.w	sl, r8, #4294967295
 8004194:	f7fc fc00 	bl	8000998 <__aeabi_dcmpeq>
 8004198:	b9b8      	cbnz	r0, 80041ca <__ieee754_rem_pio2+0x3d2>
 800419a:	4b0e      	ldr	r3, [pc, #56]	; (80041d4 <__ieee754_rem_pio2+0x3dc>)
 800419c:	462a      	mov	r2, r5
 800419e:	9301      	str	r3, [sp, #4]
 80041a0:	2302      	movs	r3, #2
 80041a2:	4621      	mov	r1, r4
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	a806      	add	r0, sp, #24
 80041a8:	4643      	mov	r3, r8
 80041aa:	f000 f8d3 	bl	8004354 <__kernel_rem_pio2>
 80041ae:	f1bb 0f00 	cmp.w	fp, #0
 80041b2:	4605      	mov	r5, r0
 80041b4:	f6bf ae56 	bge.w	8003e64 <__ieee754_rem_pio2+0x6c>
 80041b8:	6863      	ldr	r3, [r4, #4]
 80041ba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80041be:	6063      	str	r3, [r4, #4]
 80041c0:	68e3      	ldr	r3, [r4, #12]
 80041c2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80041c6:	60e3      	str	r3, [r4, #12]
 80041c8:	e708      	b.n	8003fdc <__ieee754_rem_pio2+0x1e4>
 80041ca:	46d0      	mov	r8, sl
 80041cc:	e7dc      	b.n	8004188 <__ieee754_rem_pio2+0x390>
 80041ce:	bf00      	nop
 80041d0:	41700000 	.word	0x41700000
 80041d4:	08004e78 	.word	0x08004e78

080041d8 <__kernel_cos>:
 80041d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041dc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80041e0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80041e4:	4680      	mov	r8, r0
 80041e6:	460f      	mov	r7, r1
 80041e8:	e9cd 2300 	strd	r2, r3, [sp]
 80041ec:	da04      	bge.n	80041f8 <__kernel_cos+0x20>
 80041ee:	f7fc fc05 	bl	80009fc <__aeabi_d2iz>
 80041f2:	2800      	cmp	r0, #0
 80041f4:	f000 8086 	beq.w	8004304 <__kernel_cos+0x12c>
 80041f8:	4642      	mov	r2, r8
 80041fa:	463b      	mov	r3, r7
 80041fc:	4640      	mov	r0, r8
 80041fe:	4639      	mov	r1, r7
 8004200:	f7fc f962 	bl	80004c8 <__aeabi_dmul>
 8004204:	2200      	movs	r2, #0
 8004206:	4b4e      	ldr	r3, [pc, #312]	; (8004340 <__kernel_cos+0x168>)
 8004208:	4604      	mov	r4, r0
 800420a:	460d      	mov	r5, r1
 800420c:	f7fc f95c 	bl	80004c8 <__aeabi_dmul>
 8004210:	a33f      	add	r3, pc, #252	; (adr r3, 8004310 <__kernel_cos+0x138>)
 8004212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004216:	4682      	mov	sl, r0
 8004218:	468b      	mov	fp, r1
 800421a:	4620      	mov	r0, r4
 800421c:	4629      	mov	r1, r5
 800421e:	f7fc f953 	bl	80004c8 <__aeabi_dmul>
 8004222:	a33d      	add	r3, pc, #244	; (adr r3, 8004318 <__kernel_cos+0x140>)
 8004224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004228:	f7fb ff98 	bl	800015c <__adddf3>
 800422c:	4622      	mov	r2, r4
 800422e:	462b      	mov	r3, r5
 8004230:	f7fc f94a 	bl	80004c8 <__aeabi_dmul>
 8004234:	a33a      	add	r3, pc, #232	; (adr r3, 8004320 <__kernel_cos+0x148>)
 8004236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423a:	f7fb ff8d 	bl	8000158 <__aeabi_dsub>
 800423e:	4622      	mov	r2, r4
 8004240:	462b      	mov	r3, r5
 8004242:	f7fc f941 	bl	80004c8 <__aeabi_dmul>
 8004246:	a338      	add	r3, pc, #224	; (adr r3, 8004328 <__kernel_cos+0x150>)
 8004248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424c:	f7fb ff86 	bl	800015c <__adddf3>
 8004250:	4622      	mov	r2, r4
 8004252:	462b      	mov	r3, r5
 8004254:	f7fc f938 	bl	80004c8 <__aeabi_dmul>
 8004258:	a335      	add	r3, pc, #212	; (adr r3, 8004330 <__kernel_cos+0x158>)
 800425a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425e:	f7fb ff7b 	bl	8000158 <__aeabi_dsub>
 8004262:	4622      	mov	r2, r4
 8004264:	462b      	mov	r3, r5
 8004266:	f7fc f92f 	bl	80004c8 <__aeabi_dmul>
 800426a:	a333      	add	r3, pc, #204	; (adr r3, 8004338 <__kernel_cos+0x160>)
 800426c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004270:	f7fb ff74 	bl	800015c <__adddf3>
 8004274:	4622      	mov	r2, r4
 8004276:	462b      	mov	r3, r5
 8004278:	f7fc f926 	bl	80004c8 <__aeabi_dmul>
 800427c:	4622      	mov	r2, r4
 800427e:	462b      	mov	r3, r5
 8004280:	f7fc f922 	bl	80004c8 <__aeabi_dmul>
 8004284:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004288:	4604      	mov	r4, r0
 800428a:	460d      	mov	r5, r1
 800428c:	4640      	mov	r0, r8
 800428e:	4639      	mov	r1, r7
 8004290:	f7fc f91a 	bl	80004c8 <__aeabi_dmul>
 8004294:	460b      	mov	r3, r1
 8004296:	4602      	mov	r2, r0
 8004298:	4629      	mov	r1, r5
 800429a:	4620      	mov	r0, r4
 800429c:	f7fb ff5c 	bl	8000158 <__aeabi_dsub>
 80042a0:	4b28      	ldr	r3, [pc, #160]	; (8004344 <__kernel_cos+0x16c>)
 80042a2:	4680      	mov	r8, r0
 80042a4:	429e      	cmp	r6, r3
 80042a6:	4689      	mov	r9, r1
 80042a8:	dc0e      	bgt.n	80042c8 <__kernel_cos+0xf0>
 80042aa:	4602      	mov	r2, r0
 80042ac:	460b      	mov	r3, r1
 80042ae:	4650      	mov	r0, sl
 80042b0:	4659      	mov	r1, fp
 80042b2:	f7fb ff51 	bl	8000158 <__aeabi_dsub>
 80042b6:	4602      	mov	r2, r0
 80042b8:	2000      	movs	r0, #0
 80042ba:	460b      	mov	r3, r1
 80042bc:	4922      	ldr	r1, [pc, #136]	; (8004348 <__kernel_cos+0x170>)
 80042be:	f7fb ff4b 	bl	8000158 <__aeabi_dsub>
 80042c2:	b003      	add	sp, #12
 80042c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042c8:	2400      	movs	r4, #0
 80042ca:	4b20      	ldr	r3, [pc, #128]	; (800434c <__kernel_cos+0x174>)
 80042cc:	4622      	mov	r2, r4
 80042ce:	429e      	cmp	r6, r3
 80042d0:	bfcc      	ite	gt
 80042d2:	4d1f      	ldrgt	r5, [pc, #124]	; (8004350 <__kernel_cos+0x178>)
 80042d4:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80042d8:	462b      	mov	r3, r5
 80042da:	2000      	movs	r0, #0
 80042dc:	491a      	ldr	r1, [pc, #104]	; (8004348 <__kernel_cos+0x170>)
 80042de:	f7fb ff3b 	bl	8000158 <__aeabi_dsub>
 80042e2:	4622      	mov	r2, r4
 80042e4:	4606      	mov	r6, r0
 80042e6:	460f      	mov	r7, r1
 80042e8:	462b      	mov	r3, r5
 80042ea:	4650      	mov	r0, sl
 80042ec:	4659      	mov	r1, fp
 80042ee:	f7fb ff33 	bl	8000158 <__aeabi_dsub>
 80042f2:	4642      	mov	r2, r8
 80042f4:	464b      	mov	r3, r9
 80042f6:	f7fb ff2f 	bl	8000158 <__aeabi_dsub>
 80042fa:	4602      	mov	r2, r0
 80042fc:	460b      	mov	r3, r1
 80042fe:	4630      	mov	r0, r6
 8004300:	4639      	mov	r1, r7
 8004302:	e7dc      	b.n	80042be <__kernel_cos+0xe6>
 8004304:	2000      	movs	r0, #0
 8004306:	4910      	ldr	r1, [pc, #64]	; (8004348 <__kernel_cos+0x170>)
 8004308:	e7db      	b.n	80042c2 <__kernel_cos+0xea>
 800430a:	bf00      	nop
 800430c:	f3af 8000 	nop.w
 8004310:	be8838d4 	.word	0xbe8838d4
 8004314:	bda8fae9 	.word	0xbda8fae9
 8004318:	bdb4b1c4 	.word	0xbdb4b1c4
 800431c:	3e21ee9e 	.word	0x3e21ee9e
 8004320:	809c52ad 	.word	0x809c52ad
 8004324:	3e927e4f 	.word	0x3e927e4f
 8004328:	19cb1590 	.word	0x19cb1590
 800432c:	3efa01a0 	.word	0x3efa01a0
 8004330:	16c15177 	.word	0x16c15177
 8004334:	3f56c16c 	.word	0x3f56c16c
 8004338:	5555554c 	.word	0x5555554c
 800433c:	3fa55555 	.word	0x3fa55555
 8004340:	3fe00000 	.word	0x3fe00000
 8004344:	3fd33332 	.word	0x3fd33332
 8004348:	3ff00000 	.word	0x3ff00000
 800434c:	3fe90000 	.word	0x3fe90000
 8004350:	3fd20000 	.word	0x3fd20000

08004354 <__kernel_rem_pio2>:
 8004354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004358:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800435c:	9307      	str	r3, [sp, #28]
 800435e:	9104      	str	r1, [sp, #16]
 8004360:	4bbf      	ldr	r3, [pc, #764]	; (8004660 <__kernel_rem_pio2+0x30c>)
 8004362:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8004364:	1ed4      	subs	r4, r2, #3
 8004366:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800436a:	2500      	movs	r5, #0
 800436c:	9302      	str	r3, [sp, #8]
 800436e:	9b07      	ldr	r3, [sp, #28]
 8004370:	9008      	str	r0, [sp, #32]
 8004372:	3b01      	subs	r3, #1
 8004374:	9306      	str	r3, [sp, #24]
 8004376:	2318      	movs	r3, #24
 8004378:	fb94 f4f3 	sdiv	r4, r4, r3
 800437c:	f06f 0317 	mvn.w	r3, #23
 8004380:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8004384:	fb04 3303 	mla	r3, r4, r3, r3
 8004388:	eb03 0a02 	add.w	sl, r3, r2
 800438c:	9a06      	ldr	r2, [sp, #24]
 800438e:	9b02      	ldr	r3, [sp, #8]
 8004390:	1aa7      	subs	r7, r4, r2
 8004392:	eb03 0802 	add.w	r8, r3, r2
 8004396:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004398:	2200      	movs	r2, #0
 800439a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800439e:	2300      	movs	r3, #0
 80043a0:	ae1e      	add	r6, sp, #120	; 0x78
 80043a2:	4545      	cmp	r5, r8
 80043a4:	dd14      	ble.n	80043d0 <__kernel_rem_pio2+0x7c>
 80043a6:	2600      	movs	r6, #0
 80043a8:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 80043ac:	9b02      	ldr	r3, [sp, #8]
 80043ae:	429e      	cmp	r6, r3
 80043b0:	dc39      	bgt.n	8004426 <__kernel_rem_pio2+0xd2>
 80043b2:	9b08      	ldr	r3, [sp, #32]
 80043b4:	f04f 0800 	mov.w	r8, #0
 80043b8:	3b08      	subs	r3, #8
 80043ba:	9300      	str	r3, [sp, #0]
 80043bc:	9b07      	ldr	r3, [sp, #28]
 80043be:	f04f 0900 	mov.w	r9, #0
 80043c2:	199d      	adds	r5, r3, r6
 80043c4:	ab20      	add	r3, sp, #128	; 0x80
 80043c6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80043ca:	9305      	str	r3, [sp, #20]
 80043cc:	2700      	movs	r7, #0
 80043ce:	e023      	b.n	8004418 <__kernel_rem_pio2+0xc4>
 80043d0:	42ef      	cmn	r7, r5
 80043d2:	d40b      	bmi.n	80043ec <__kernel_rem_pio2+0x98>
 80043d4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80043d8:	e9cd 2300 	strd	r2, r3, [sp]
 80043dc:	f7fc f80a 	bl	80003f4 <__aeabi_i2d>
 80043e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80043e4:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 80043e8:	3501      	adds	r5, #1
 80043ea:	e7da      	b.n	80043a2 <__kernel_rem_pio2+0x4e>
 80043ec:	4610      	mov	r0, r2
 80043ee:	4619      	mov	r1, r3
 80043f0:	e7f8      	b.n	80043e4 <__kernel_rem_pio2+0x90>
 80043f2:	9905      	ldr	r1, [sp, #20]
 80043f4:	9d00      	ldr	r5, [sp, #0]
 80043f6:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80043fa:	9105      	str	r1, [sp, #20]
 80043fc:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 8004400:	9500      	str	r5, [sp, #0]
 8004402:	f7fc f861 	bl	80004c8 <__aeabi_dmul>
 8004406:	4602      	mov	r2, r0
 8004408:	460b      	mov	r3, r1
 800440a:	4640      	mov	r0, r8
 800440c:	4649      	mov	r1, r9
 800440e:	f7fb fea5 	bl	800015c <__adddf3>
 8004412:	4680      	mov	r8, r0
 8004414:	4689      	mov	r9, r1
 8004416:	3701      	adds	r7, #1
 8004418:	9b06      	ldr	r3, [sp, #24]
 800441a:	429f      	cmp	r7, r3
 800441c:	dde9      	ble.n	80043f2 <__kernel_rem_pio2+0x9e>
 800441e:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 8004422:	3601      	adds	r6, #1
 8004424:	e7c2      	b.n	80043ac <__kernel_rem_pio2+0x58>
 8004426:	9b02      	ldr	r3, [sp, #8]
 8004428:	aa0c      	add	r2, sp, #48	; 0x30
 800442a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800442e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004430:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004432:	9f02      	ldr	r7, [sp, #8]
 8004434:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004438:	930a      	str	r3, [sp, #40]	; 0x28
 800443a:	2600      	movs	r6, #0
 800443c:	ab98      	add	r3, sp, #608	; 0x260
 800443e:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 8004442:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004446:	f10b 3bff 	add.w	fp, fp, #4294967295
 800444a:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800444e:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8004452:	ab98      	add	r3, sp, #608	; 0x260
 8004454:	445b      	add	r3, fp
 8004456:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 800445a:	1bbb      	subs	r3, r7, r6
 800445c:	2b00      	cmp	r3, #0
 800445e:	dc71      	bgt.n	8004544 <__kernel_rem_pio2+0x1f0>
 8004460:	4652      	mov	r2, sl
 8004462:	4640      	mov	r0, r8
 8004464:	4649      	mov	r1, r9
 8004466:	f000 fc07 	bl	8004c78 <scalbn>
 800446a:	2200      	movs	r2, #0
 800446c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004470:	4604      	mov	r4, r0
 8004472:	460d      	mov	r5, r1
 8004474:	f7fc f828 	bl	80004c8 <__aeabi_dmul>
 8004478:	f000 fb76 	bl	8004b68 <floor>
 800447c:	2200      	movs	r2, #0
 800447e:	4b79      	ldr	r3, [pc, #484]	; (8004664 <__kernel_rem_pio2+0x310>)
 8004480:	f7fc f822 	bl	80004c8 <__aeabi_dmul>
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	4620      	mov	r0, r4
 800448a:	4629      	mov	r1, r5
 800448c:	f7fb fe64 	bl	8000158 <__aeabi_dsub>
 8004490:	460d      	mov	r5, r1
 8004492:	4604      	mov	r4, r0
 8004494:	f7fc fab2 	bl	80009fc <__aeabi_d2iz>
 8004498:	9005      	str	r0, [sp, #20]
 800449a:	f7fb ffab 	bl	80003f4 <__aeabi_i2d>
 800449e:	4602      	mov	r2, r0
 80044a0:	460b      	mov	r3, r1
 80044a2:	4620      	mov	r0, r4
 80044a4:	4629      	mov	r1, r5
 80044a6:	f7fb fe57 	bl	8000158 <__aeabi_dsub>
 80044aa:	f1ba 0f00 	cmp.w	sl, #0
 80044ae:	4680      	mov	r8, r0
 80044b0:	4689      	mov	r9, r1
 80044b2:	dd6c      	ble.n	800458e <__kernel_rem_pio2+0x23a>
 80044b4:	1e7a      	subs	r2, r7, #1
 80044b6:	ab0c      	add	r3, sp, #48	; 0x30
 80044b8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80044bc:	f1ca 0118 	rsb	r1, sl, #24
 80044c0:	9c05      	ldr	r4, [sp, #20]
 80044c2:	fa40 f301 	asr.w	r3, r0, r1
 80044c6:	441c      	add	r4, r3
 80044c8:	408b      	lsls	r3, r1
 80044ca:	1ac0      	subs	r0, r0, r3
 80044cc:	ab0c      	add	r3, sp, #48	; 0x30
 80044ce:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80044d2:	f1ca 0317 	rsb	r3, sl, #23
 80044d6:	9405      	str	r4, [sp, #20]
 80044d8:	fa40 f303 	asr.w	r3, r0, r3
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	9b00      	ldr	r3, [sp, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	dd62      	ble.n	80045aa <__kernel_rem_pio2+0x256>
 80044e4:	2200      	movs	r2, #0
 80044e6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80044ea:	4614      	mov	r4, r2
 80044ec:	9b05      	ldr	r3, [sp, #20]
 80044ee:	3301      	adds	r3, #1
 80044f0:	9305      	str	r3, [sp, #20]
 80044f2:	4297      	cmp	r7, r2
 80044f4:	f300 809f 	bgt.w	8004636 <__kernel_rem_pio2+0x2e2>
 80044f8:	f1ba 0f00 	cmp.w	sl, #0
 80044fc:	dd07      	ble.n	800450e <__kernel_rem_pio2+0x1ba>
 80044fe:	f1ba 0f01 	cmp.w	sl, #1
 8004502:	f000 80bb 	beq.w	800467c <__kernel_rem_pio2+0x328>
 8004506:	f1ba 0f02 	cmp.w	sl, #2
 800450a:	f000 80c1 	beq.w	8004690 <__kernel_rem_pio2+0x33c>
 800450e:	9b00      	ldr	r3, [sp, #0]
 8004510:	2b02      	cmp	r3, #2
 8004512:	d14a      	bne.n	80045aa <__kernel_rem_pio2+0x256>
 8004514:	4642      	mov	r2, r8
 8004516:	464b      	mov	r3, r9
 8004518:	2000      	movs	r0, #0
 800451a:	4953      	ldr	r1, [pc, #332]	; (8004668 <__kernel_rem_pio2+0x314>)
 800451c:	f7fb fe1c 	bl	8000158 <__aeabi_dsub>
 8004520:	4680      	mov	r8, r0
 8004522:	4689      	mov	r9, r1
 8004524:	2c00      	cmp	r4, #0
 8004526:	d040      	beq.n	80045aa <__kernel_rem_pio2+0x256>
 8004528:	4652      	mov	r2, sl
 800452a:	2000      	movs	r0, #0
 800452c:	494e      	ldr	r1, [pc, #312]	; (8004668 <__kernel_rem_pio2+0x314>)
 800452e:	f000 fba3 	bl	8004c78 <scalbn>
 8004532:	4602      	mov	r2, r0
 8004534:	460b      	mov	r3, r1
 8004536:	4640      	mov	r0, r8
 8004538:	4649      	mov	r1, r9
 800453a:	f7fb fe0d 	bl	8000158 <__aeabi_dsub>
 800453e:	4680      	mov	r8, r0
 8004540:	4689      	mov	r9, r1
 8004542:	e032      	b.n	80045aa <__kernel_rem_pio2+0x256>
 8004544:	2200      	movs	r2, #0
 8004546:	4b49      	ldr	r3, [pc, #292]	; (800466c <__kernel_rem_pio2+0x318>)
 8004548:	4640      	mov	r0, r8
 800454a:	4649      	mov	r1, r9
 800454c:	f7fb ffbc 	bl	80004c8 <__aeabi_dmul>
 8004550:	f7fc fa54 	bl	80009fc <__aeabi_d2iz>
 8004554:	f7fb ff4e 	bl	80003f4 <__aeabi_i2d>
 8004558:	2200      	movs	r2, #0
 800455a:	4b45      	ldr	r3, [pc, #276]	; (8004670 <__kernel_rem_pio2+0x31c>)
 800455c:	e9cd 0100 	strd	r0, r1, [sp]
 8004560:	f7fb ffb2 	bl	80004c8 <__aeabi_dmul>
 8004564:	4602      	mov	r2, r0
 8004566:	460b      	mov	r3, r1
 8004568:	4640      	mov	r0, r8
 800456a:	4649      	mov	r1, r9
 800456c:	f7fb fdf4 	bl	8000158 <__aeabi_dsub>
 8004570:	f7fc fa44 	bl	80009fc <__aeabi_d2iz>
 8004574:	ab0c      	add	r3, sp, #48	; 0x30
 8004576:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800457a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800457e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004582:	f7fb fdeb 	bl	800015c <__adddf3>
 8004586:	3601      	adds	r6, #1
 8004588:	4680      	mov	r8, r0
 800458a:	4689      	mov	r9, r1
 800458c:	e765      	b.n	800445a <__kernel_rem_pio2+0x106>
 800458e:	d105      	bne.n	800459c <__kernel_rem_pio2+0x248>
 8004590:	1e7b      	subs	r3, r7, #1
 8004592:	aa0c      	add	r2, sp, #48	; 0x30
 8004594:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004598:	15c3      	asrs	r3, r0, #23
 800459a:	e79f      	b.n	80044dc <__kernel_rem_pio2+0x188>
 800459c:	2200      	movs	r2, #0
 800459e:	4b35      	ldr	r3, [pc, #212]	; (8004674 <__kernel_rem_pio2+0x320>)
 80045a0:	f7fc fa18 	bl	80009d4 <__aeabi_dcmpge>
 80045a4:	2800      	cmp	r0, #0
 80045a6:	d143      	bne.n	8004630 <__kernel_rem_pio2+0x2dc>
 80045a8:	9000      	str	r0, [sp, #0]
 80045aa:	2200      	movs	r2, #0
 80045ac:	2300      	movs	r3, #0
 80045ae:	4640      	mov	r0, r8
 80045b0:	4649      	mov	r1, r9
 80045b2:	f7fc f9f1 	bl	8000998 <__aeabi_dcmpeq>
 80045b6:	2800      	cmp	r0, #0
 80045b8:	f000 80c3 	beq.w	8004742 <__kernel_rem_pio2+0x3ee>
 80045bc:	1e7c      	subs	r4, r7, #1
 80045be:	4623      	mov	r3, r4
 80045c0:	2200      	movs	r2, #0
 80045c2:	9902      	ldr	r1, [sp, #8]
 80045c4:	428b      	cmp	r3, r1
 80045c6:	da6a      	bge.n	800469e <__kernel_rem_pio2+0x34a>
 80045c8:	2a00      	cmp	r2, #0
 80045ca:	f000 8084 	beq.w	80046d6 <__kernel_rem_pio2+0x382>
 80045ce:	ab0c      	add	r3, sp, #48	; 0x30
 80045d0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80045d4:	f1aa 0a18 	sub.w	sl, sl, #24
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f000 80b0 	beq.w	800473e <__kernel_rem_pio2+0x3ea>
 80045de:	4652      	mov	r2, sl
 80045e0:	2000      	movs	r0, #0
 80045e2:	4921      	ldr	r1, [pc, #132]	; (8004668 <__kernel_rem_pio2+0x314>)
 80045e4:	f000 fb48 	bl	8004c78 <scalbn>
 80045e8:	4625      	mov	r5, r4
 80045ea:	4606      	mov	r6, r0
 80045ec:	460f      	mov	r7, r1
 80045ee:	f04f 0a00 	mov.w	sl, #0
 80045f2:	00e3      	lsls	r3, r4, #3
 80045f4:	aa98      	add	r2, sp, #608	; 0x260
 80045f6:	eb02 0803 	add.w	r8, r2, r3
 80045fa:	f8df b070 	ldr.w	fp, [pc, #112]	; 800466c <__kernel_rem_pio2+0x318>
 80045fe:	9306      	str	r3, [sp, #24]
 8004600:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 8004604:	2d00      	cmp	r5, #0
 8004606:	f280 80d2 	bge.w	80047ae <__kernel_rem_pio2+0x45a>
 800460a:	2500      	movs	r5, #0
 800460c:	9a06      	ldr	r2, [sp, #24]
 800460e:	ab98      	add	r3, sp, #608	; 0x260
 8004610:	189e      	adds	r6, r3, r2
 8004612:	3ea8      	subs	r6, #168	; 0xa8
 8004614:	1b63      	subs	r3, r4, r5
 8004616:	2b00      	cmp	r3, #0
 8004618:	f2c0 80f9 	blt.w	800480e <__kernel_rem_pio2+0x4ba>
 800461c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8004678 <__kernel_rem_pio2+0x324>
 8004620:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 8004624:	f04f 0a00 	mov.w	sl, #0
 8004628:	f04f 0b00 	mov.w	fp, #0
 800462c:	2700      	movs	r7, #0
 800462e:	e0e2      	b.n	80047f6 <__kernel_rem_pio2+0x4a2>
 8004630:	2302      	movs	r3, #2
 8004632:	9300      	str	r3, [sp, #0]
 8004634:	e756      	b.n	80044e4 <__kernel_rem_pio2+0x190>
 8004636:	ab0c      	add	r3, sp, #48	; 0x30
 8004638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800463c:	b94c      	cbnz	r4, 8004652 <__kernel_rem_pio2+0x2fe>
 800463e:	b12b      	cbz	r3, 800464c <__kernel_rem_pio2+0x2f8>
 8004640:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004644:	a80c      	add	r0, sp, #48	; 0x30
 8004646:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800464a:	2301      	movs	r3, #1
 800464c:	3201      	adds	r2, #1
 800464e:	461c      	mov	r4, r3
 8004650:	e74f      	b.n	80044f2 <__kernel_rem_pio2+0x19e>
 8004652:	1acb      	subs	r3, r1, r3
 8004654:	a80c      	add	r0, sp, #48	; 0x30
 8004656:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800465a:	4623      	mov	r3, r4
 800465c:	e7f6      	b.n	800464c <__kernel_rem_pio2+0x2f8>
 800465e:	bf00      	nop
 8004660:	08004fc0 	.word	0x08004fc0
 8004664:	40200000 	.word	0x40200000
 8004668:	3ff00000 	.word	0x3ff00000
 800466c:	3e700000 	.word	0x3e700000
 8004670:	41700000 	.word	0x41700000
 8004674:	3fe00000 	.word	0x3fe00000
 8004678:	08004f78 	.word	0x08004f78
 800467c:	1e7a      	subs	r2, r7, #1
 800467e:	ab0c      	add	r3, sp, #48	; 0x30
 8004680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004684:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004688:	a90c      	add	r1, sp, #48	; 0x30
 800468a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800468e:	e73e      	b.n	800450e <__kernel_rem_pio2+0x1ba>
 8004690:	1e7a      	subs	r2, r7, #1
 8004692:	ab0c      	add	r3, sp, #48	; 0x30
 8004694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004698:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800469c:	e7f4      	b.n	8004688 <__kernel_rem_pio2+0x334>
 800469e:	a90c      	add	r1, sp, #48	; 0x30
 80046a0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80046a4:	3b01      	subs	r3, #1
 80046a6:	430a      	orrs	r2, r1
 80046a8:	e78b      	b.n	80045c2 <__kernel_rem_pio2+0x26e>
 80046aa:	3401      	adds	r4, #1
 80046ac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80046b0:	2a00      	cmp	r2, #0
 80046b2:	d0fa      	beq.n	80046aa <__kernel_rem_pio2+0x356>
 80046b4:	ab98      	add	r3, sp, #608	; 0x260
 80046b6:	449b      	add	fp, r3
 80046b8:	9b07      	ldr	r3, [sp, #28]
 80046ba:	1c7e      	adds	r6, r7, #1
 80046bc:	19dd      	adds	r5, r3, r7
 80046be:	ab98      	add	r3, sp, #608	; 0x260
 80046c0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80046c4:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 80046c8:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 80046cc:	443c      	add	r4, r7
 80046ce:	42b4      	cmp	r4, r6
 80046d0:	da04      	bge.n	80046dc <__kernel_rem_pio2+0x388>
 80046d2:	4627      	mov	r7, r4
 80046d4:	e6b1      	b.n	800443a <__kernel_rem_pio2+0xe6>
 80046d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046d8:	2401      	movs	r4, #1
 80046da:	e7e7      	b.n	80046ac <__kernel_rem_pio2+0x358>
 80046dc:	f105 0308 	add.w	r3, r5, #8
 80046e0:	9309      	str	r3, [sp, #36]	; 0x24
 80046e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046e4:	2700      	movs	r7, #0
 80046e6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80046ea:	f7fb fe83 	bl	80003f4 <__aeabi_i2d>
 80046ee:	f04f 0800 	mov.w	r8, #0
 80046f2:	f04f 0900 	mov.w	r9, #0
 80046f6:	9b08      	ldr	r3, [sp, #32]
 80046f8:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80046fc:	3b08      	subs	r3, #8
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	f105 0310 	add.w	r3, r5, #16
 8004704:	9305      	str	r3, [sp, #20]
 8004706:	9b06      	ldr	r3, [sp, #24]
 8004708:	429f      	cmp	r7, r3
 800470a:	dd04      	ble.n	8004716 <__kernel_rem_pio2+0x3c2>
 800470c:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 8004710:	3601      	adds	r6, #1
 8004712:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004714:	e7db      	b.n	80046ce <__kernel_rem_pio2+0x37a>
 8004716:	9905      	ldr	r1, [sp, #20]
 8004718:	9d00      	ldr	r5, [sp, #0]
 800471a:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800471e:	9105      	str	r1, [sp, #20]
 8004720:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 8004724:	9500      	str	r5, [sp, #0]
 8004726:	f7fb fecf 	bl	80004c8 <__aeabi_dmul>
 800472a:	4602      	mov	r2, r0
 800472c:	460b      	mov	r3, r1
 800472e:	4640      	mov	r0, r8
 8004730:	4649      	mov	r1, r9
 8004732:	f7fb fd13 	bl	800015c <__adddf3>
 8004736:	3701      	adds	r7, #1
 8004738:	4680      	mov	r8, r0
 800473a:	4689      	mov	r9, r1
 800473c:	e7e3      	b.n	8004706 <__kernel_rem_pio2+0x3b2>
 800473e:	3c01      	subs	r4, #1
 8004740:	e745      	b.n	80045ce <__kernel_rem_pio2+0x27a>
 8004742:	f1ca 0200 	rsb	r2, sl, #0
 8004746:	4640      	mov	r0, r8
 8004748:	4649      	mov	r1, r9
 800474a:	f000 fa95 	bl	8004c78 <scalbn>
 800474e:	2200      	movs	r2, #0
 8004750:	4ba3      	ldr	r3, [pc, #652]	; (80049e0 <__kernel_rem_pio2+0x68c>)
 8004752:	4604      	mov	r4, r0
 8004754:	460d      	mov	r5, r1
 8004756:	f7fc f93d 	bl	80009d4 <__aeabi_dcmpge>
 800475a:	b1f8      	cbz	r0, 800479c <__kernel_rem_pio2+0x448>
 800475c:	2200      	movs	r2, #0
 800475e:	4ba1      	ldr	r3, [pc, #644]	; (80049e4 <__kernel_rem_pio2+0x690>)
 8004760:	4620      	mov	r0, r4
 8004762:	4629      	mov	r1, r5
 8004764:	f7fb feb0 	bl	80004c8 <__aeabi_dmul>
 8004768:	f7fc f948 	bl	80009fc <__aeabi_d2iz>
 800476c:	4606      	mov	r6, r0
 800476e:	f7fb fe41 	bl	80003f4 <__aeabi_i2d>
 8004772:	2200      	movs	r2, #0
 8004774:	4b9a      	ldr	r3, [pc, #616]	; (80049e0 <__kernel_rem_pio2+0x68c>)
 8004776:	f7fb fea7 	bl	80004c8 <__aeabi_dmul>
 800477a:	460b      	mov	r3, r1
 800477c:	4602      	mov	r2, r0
 800477e:	4629      	mov	r1, r5
 8004780:	4620      	mov	r0, r4
 8004782:	f7fb fce9 	bl	8000158 <__aeabi_dsub>
 8004786:	f7fc f939 	bl	80009fc <__aeabi_d2iz>
 800478a:	1c7c      	adds	r4, r7, #1
 800478c:	ab0c      	add	r3, sp, #48	; 0x30
 800478e:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8004792:	f10a 0a18 	add.w	sl, sl, #24
 8004796:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800479a:	e720      	b.n	80045de <__kernel_rem_pio2+0x28a>
 800479c:	4620      	mov	r0, r4
 800479e:	4629      	mov	r1, r5
 80047a0:	f7fc f92c 	bl	80009fc <__aeabi_d2iz>
 80047a4:	ab0c      	add	r3, sp, #48	; 0x30
 80047a6:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80047aa:	463c      	mov	r4, r7
 80047ac:	e717      	b.n	80045de <__kernel_rem_pio2+0x28a>
 80047ae:	ab0c      	add	r3, sp, #48	; 0x30
 80047b0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80047b4:	f7fb fe1e 	bl	80003f4 <__aeabi_i2d>
 80047b8:	4632      	mov	r2, r6
 80047ba:	463b      	mov	r3, r7
 80047bc:	f7fb fe84 	bl	80004c8 <__aeabi_dmul>
 80047c0:	4652      	mov	r2, sl
 80047c2:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80047c6:	465b      	mov	r3, fp
 80047c8:	4630      	mov	r0, r6
 80047ca:	4639      	mov	r1, r7
 80047cc:	f7fb fe7c 	bl	80004c8 <__aeabi_dmul>
 80047d0:	3d01      	subs	r5, #1
 80047d2:	4606      	mov	r6, r0
 80047d4:	460f      	mov	r7, r1
 80047d6:	e715      	b.n	8004604 <__kernel_rem_pio2+0x2b0>
 80047d8:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 80047dc:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 80047e0:	f7fb fe72 	bl	80004c8 <__aeabi_dmul>
 80047e4:	4602      	mov	r2, r0
 80047e6:	460b      	mov	r3, r1
 80047e8:	4650      	mov	r0, sl
 80047ea:	4659      	mov	r1, fp
 80047ec:	f7fb fcb6 	bl	800015c <__adddf3>
 80047f0:	4682      	mov	sl, r0
 80047f2:	468b      	mov	fp, r1
 80047f4:	3701      	adds	r7, #1
 80047f6:	9b02      	ldr	r3, [sp, #8]
 80047f8:	429f      	cmp	r7, r3
 80047fa:	dc01      	bgt.n	8004800 <__kernel_rem_pio2+0x4ac>
 80047fc:	42bd      	cmp	r5, r7
 80047fe:	daeb      	bge.n	80047d8 <__kernel_rem_pio2+0x484>
 8004800:	ab48      	add	r3, sp, #288	; 0x120
 8004802:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004806:	e9c3 ab00 	strd	sl, fp, [r3]
 800480a:	3501      	adds	r5, #1
 800480c:	e702      	b.n	8004614 <__kernel_rem_pio2+0x2c0>
 800480e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8004810:	2b03      	cmp	r3, #3
 8004812:	d86c      	bhi.n	80048ee <__kernel_rem_pio2+0x59a>
 8004814:	e8df f003 	tbb	[pc, r3]
 8004818:	022f2f59 	.word	0x022f2f59
 800481c:	9a06      	ldr	r2, [sp, #24]
 800481e:	ab48      	add	r3, sp, #288	; 0x120
 8004820:	189d      	adds	r5, r3, r2
 8004822:	46aa      	mov	sl, r5
 8004824:	46a3      	mov	fp, r4
 8004826:	f1bb 0f00 	cmp.w	fp, #0
 800482a:	f300 8087 	bgt.w	800493c <__kernel_rem_pio2+0x5e8>
 800482e:	46a2      	mov	sl, r4
 8004830:	f1ba 0f01 	cmp.w	sl, #1
 8004834:	f300 809f 	bgt.w	8004976 <__kernel_rem_pio2+0x622>
 8004838:	2700      	movs	r7, #0
 800483a:	463e      	mov	r6, r7
 800483c:	9d06      	ldr	r5, [sp, #24]
 800483e:	ab48      	add	r3, sp, #288	; 0x120
 8004840:	3508      	adds	r5, #8
 8004842:	441d      	add	r5, r3
 8004844:	2c01      	cmp	r4, #1
 8004846:	f300 80b3 	bgt.w	80049b0 <__kernel_rem_pio2+0x65c>
 800484a:	9b00      	ldr	r3, [sp, #0]
 800484c:	9d48      	ldr	r5, [sp, #288]	; 0x120
 800484e:	9849      	ldr	r0, [sp, #292]	; 0x124
 8004850:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 8004852:	994b      	ldr	r1, [sp, #300]	; 0x12c
 8004854:	2b00      	cmp	r3, #0
 8004856:	f040 80b5 	bne.w	80049c4 <__kernel_rem_pio2+0x670>
 800485a:	4603      	mov	r3, r0
 800485c:	462a      	mov	r2, r5
 800485e:	9804      	ldr	r0, [sp, #16]
 8004860:	e9c0 2300 	strd	r2, r3, [r0]
 8004864:	4622      	mov	r2, r4
 8004866:	460b      	mov	r3, r1
 8004868:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800486c:	463a      	mov	r2, r7
 800486e:	4633      	mov	r3, r6
 8004870:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004874:	e03b      	b.n	80048ee <__kernel_rem_pio2+0x59a>
 8004876:	f04f 0c00 	mov.w	ip, #0
 800487a:	4626      	mov	r6, r4
 800487c:	4667      	mov	r7, ip
 800487e:	9d06      	ldr	r5, [sp, #24]
 8004880:	ab48      	add	r3, sp, #288	; 0x120
 8004882:	3508      	adds	r5, #8
 8004884:	441d      	add	r5, r3
 8004886:	2e00      	cmp	r6, #0
 8004888:	da42      	bge.n	8004910 <__kernel_rem_pio2+0x5bc>
 800488a:	9b00      	ldr	r3, [sp, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d049      	beq.n	8004924 <__kernel_rem_pio2+0x5d0>
 8004890:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 8004894:	4662      	mov	r2, ip
 8004896:	460b      	mov	r3, r1
 8004898:	9904      	ldr	r1, [sp, #16]
 800489a:	2601      	movs	r6, #1
 800489c:	e9c1 2300 	strd	r2, r3, [r1]
 80048a0:	a948      	add	r1, sp, #288	; 0x120
 80048a2:	463b      	mov	r3, r7
 80048a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048a8:	f7fb fc56 	bl	8000158 <__aeabi_dsub>
 80048ac:	4684      	mov	ip, r0
 80048ae:	460f      	mov	r7, r1
 80048b0:	ad48      	add	r5, sp, #288	; 0x120
 80048b2:	42b4      	cmp	r4, r6
 80048b4:	da38      	bge.n	8004928 <__kernel_rem_pio2+0x5d4>
 80048b6:	9b00      	ldr	r3, [sp, #0]
 80048b8:	b10b      	cbz	r3, 80048be <__kernel_rem_pio2+0x56a>
 80048ba:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80048be:	4662      	mov	r2, ip
 80048c0:	463b      	mov	r3, r7
 80048c2:	9904      	ldr	r1, [sp, #16]
 80048c4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80048c8:	e011      	b.n	80048ee <__kernel_rem_pio2+0x59a>
 80048ca:	2700      	movs	r7, #0
 80048cc:	463d      	mov	r5, r7
 80048ce:	9b06      	ldr	r3, [sp, #24]
 80048d0:	aa98      	add	r2, sp, #608	; 0x260
 80048d2:	4413      	add	r3, r2
 80048d4:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 80048d8:	2c00      	cmp	r4, #0
 80048da:	da0f      	bge.n	80048fc <__kernel_rem_pio2+0x5a8>
 80048dc:	9b00      	ldr	r3, [sp, #0]
 80048de:	b10b      	cbz	r3, 80048e4 <__kernel_rem_pio2+0x590>
 80048e0:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80048e4:	463a      	mov	r2, r7
 80048e6:	462b      	mov	r3, r5
 80048e8:	9904      	ldr	r1, [sp, #16]
 80048ea:	e9c1 2300 	strd	r2, r3, [r1]
 80048ee:	9b05      	ldr	r3, [sp, #20]
 80048f0:	f003 0007 	and.w	r0, r3, #7
 80048f4:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80048f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048fc:	4638      	mov	r0, r7
 80048fe:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8004902:	4629      	mov	r1, r5
 8004904:	f7fb fc2a 	bl	800015c <__adddf3>
 8004908:	3c01      	subs	r4, #1
 800490a:	4607      	mov	r7, r0
 800490c:	460d      	mov	r5, r1
 800490e:	e7e3      	b.n	80048d8 <__kernel_rem_pio2+0x584>
 8004910:	4660      	mov	r0, ip
 8004912:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8004916:	4639      	mov	r1, r7
 8004918:	f7fb fc20 	bl	800015c <__adddf3>
 800491c:	3e01      	subs	r6, #1
 800491e:	4684      	mov	ip, r0
 8004920:	460f      	mov	r7, r1
 8004922:	e7b0      	b.n	8004886 <__kernel_rem_pio2+0x532>
 8004924:	4639      	mov	r1, r7
 8004926:	e7b5      	b.n	8004894 <__kernel_rem_pio2+0x540>
 8004928:	4660      	mov	r0, ip
 800492a:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800492e:	4639      	mov	r1, r7
 8004930:	f7fb fc14 	bl	800015c <__adddf3>
 8004934:	3601      	adds	r6, #1
 8004936:	4684      	mov	ip, r0
 8004938:	460f      	mov	r7, r1
 800493a:	e7ba      	b.n	80048b2 <__kernel_rem_pio2+0x55e>
 800493c:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 8004940:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 8004944:	4640      	mov	r0, r8
 8004946:	4649      	mov	r1, r9
 8004948:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800494c:	f7fb fc06 	bl	800015c <__adddf3>
 8004950:	4602      	mov	r2, r0
 8004952:	460b      	mov	r3, r1
 8004954:	4606      	mov	r6, r0
 8004956:	460f      	mov	r7, r1
 8004958:	4640      	mov	r0, r8
 800495a:	4649      	mov	r1, r9
 800495c:	f7fb fbfc 	bl	8000158 <__aeabi_dsub>
 8004960:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004964:	f7fb fbfa 	bl	800015c <__adddf3>
 8004968:	f10b 3bff 	add.w	fp, fp, #4294967295
 800496c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004970:	e9ca 6700 	strd	r6, r7, [sl]
 8004974:	e757      	b.n	8004826 <__kernel_rem_pio2+0x4d2>
 8004976:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 800497a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800497e:	4630      	mov	r0, r6
 8004980:	4639      	mov	r1, r7
 8004982:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004986:	f7fb fbe9 	bl	800015c <__adddf3>
 800498a:	4602      	mov	r2, r0
 800498c:	460b      	mov	r3, r1
 800498e:	4680      	mov	r8, r0
 8004990:	4689      	mov	r9, r1
 8004992:	4630      	mov	r0, r6
 8004994:	4639      	mov	r1, r7
 8004996:	f7fb fbdf 	bl	8000158 <__aeabi_dsub>
 800499a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800499e:	f7fb fbdd 	bl	800015c <__adddf3>
 80049a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80049a6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80049aa:	e9c5 8900 	strd	r8, r9, [r5]
 80049ae:	e73f      	b.n	8004830 <__kernel_rem_pio2+0x4dc>
 80049b0:	4638      	mov	r0, r7
 80049b2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80049b6:	4631      	mov	r1, r6
 80049b8:	f7fb fbd0 	bl	800015c <__adddf3>
 80049bc:	3c01      	subs	r4, #1
 80049be:	4607      	mov	r7, r0
 80049c0:	460e      	mov	r6, r1
 80049c2:	e73f      	b.n	8004844 <__kernel_rem_pio2+0x4f0>
 80049c4:	9b04      	ldr	r3, [sp, #16]
 80049c6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80049ca:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80049ce:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80049d2:	601d      	str	r5, [r3, #0]
 80049d4:	e9c3 0401 	strd	r0, r4, [r3, #4]
 80049d8:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80049dc:	615e      	str	r6, [r3, #20]
 80049de:	e786      	b.n	80048ee <__kernel_rem_pio2+0x59a>
 80049e0:	41700000 	.word	0x41700000
 80049e4:	3e700000 	.word	0x3e700000

080049e8 <__kernel_sin>:
 80049e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049ec:	b086      	sub	sp, #24
 80049ee:	e9cd 2300 	strd	r2, r3, [sp]
 80049f2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80049f6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80049fa:	4682      	mov	sl, r0
 80049fc:	460c      	mov	r4, r1
 80049fe:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004a00:	da03      	bge.n	8004a0a <__kernel_sin+0x22>
 8004a02:	f7fb fffb 	bl	80009fc <__aeabi_d2iz>
 8004a06:	2800      	cmp	r0, #0
 8004a08:	d050      	beq.n	8004aac <__kernel_sin+0xc4>
 8004a0a:	4652      	mov	r2, sl
 8004a0c:	4623      	mov	r3, r4
 8004a0e:	4650      	mov	r0, sl
 8004a10:	4621      	mov	r1, r4
 8004a12:	f7fb fd59 	bl	80004c8 <__aeabi_dmul>
 8004a16:	4606      	mov	r6, r0
 8004a18:	460f      	mov	r7, r1
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	4650      	mov	r0, sl
 8004a20:	4621      	mov	r1, r4
 8004a22:	f7fb fd51 	bl	80004c8 <__aeabi_dmul>
 8004a26:	a33e      	add	r3, pc, #248	; (adr r3, 8004b20 <__kernel_sin+0x138>)
 8004a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2c:	4680      	mov	r8, r0
 8004a2e:	4689      	mov	r9, r1
 8004a30:	4630      	mov	r0, r6
 8004a32:	4639      	mov	r1, r7
 8004a34:	f7fb fd48 	bl	80004c8 <__aeabi_dmul>
 8004a38:	a33b      	add	r3, pc, #236	; (adr r3, 8004b28 <__kernel_sin+0x140>)
 8004a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3e:	f7fb fb8b 	bl	8000158 <__aeabi_dsub>
 8004a42:	4632      	mov	r2, r6
 8004a44:	463b      	mov	r3, r7
 8004a46:	f7fb fd3f 	bl	80004c8 <__aeabi_dmul>
 8004a4a:	a339      	add	r3, pc, #228	; (adr r3, 8004b30 <__kernel_sin+0x148>)
 8004a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a50:	f7fb fb84 	bl	800015c <__adddf3>
 8004a54:	4632      	mov	r2, r6
 8004a56:	463b      	mov	r3, r7
 8004a58:	f7fb fd36 	bl	80004c8 <__aeabi_dmul>
 8004a5c:	a336      	add	r3, pc, #216	; (adr r3, 8004b38 <__kernel_sin+0x150>)
 8004a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a62:	f7fb fb79 	bl	8000158 <__aeabi_dsub>
 8004a66:	4632      	mov	r2, r6
 8004a68:	463b      	mov	r3, r7
 8004a6a:	f7fb fd2d 	bl	80004c8 <__aeabi_dmul>
 8004a6e:	a334      	add	r3, pc, #208	; (adr r3, 8004b40 <__kernel_sin+0x158>)
 8004a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a74:	f7fb fb72 	bl	800015c <__adddf3>
 8004a78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a7c:	b9dd      	cbnz	r5, 8004ab6 <__kernel_sin+0xce>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	460b      	mov	r3, r1
 8004a82:	4630      	mov	r0, r6
 8004a84:	4639      	mov	r1, r7
 8004a86:	f7fb fd1f 	bl	80004c8 <__aeabi_dmul>
 8004a8a:	a32f      	add	r3, pc, #188	; (adr r3, 8004b48 <__kernel_sin+0x160>)
 8004a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a90:	f7fb fb62 	bl	8000158 <__aeabi_dsub>
 8004a94:	4642      	mov	r2, r8
 8004a96:	464b      	mov	r3, r9
 8004a98:	f7fb fd16 	bl	80004c8 <__aeabi_dmul>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	4650      	mov	r0, sl
 8004aa2:	4621      	mov	r1, r4
 8004aa4:	f7fb fb5a 	bl	800015c <__adddf3>
 8004aa8:	4682      	mov	sl, r0
 8004aaa:	460c      	mov	r4, r1
 8004aac:	4650      	mov	r0, sl
 8004aae:	4621      	mov	r1, r4
 8004ab0:	b006      	add	sp, #24
 8004ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004abc:	4b24      	ldr	r3, [pc, #144]	; (8004b50 <__kernel_sin+0x168>)
 8004abe:	f7fb fd03 	bl	80004c8 <__aeabi_dmul>
 8004ac2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ac6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004aca:	4640      	mov	r0, r8
 8004acc:	4649      	mov	r1, r9
 8004ace:	f7fb fcfb 	bl	80004c8 <__aeabi_dmul>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ada:	f7fb fb3d 	bl	8000158 <__aeabi_dsub>
 8004ade:	4632      	mov	r2, r6
 8004ae0:	463b      	mov	r3, r7
 8004ae2:	f7fb fcf1 	bl	80004c8 <__aeabi_dmul>
 8004ae6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004aea:	f7fb fb35 	bl	8000158 <__aeabi_dsub>
 8004aee:	a316      	add	r3, pc, #88	; (adr r3, 8004b48 <__kernel_sin+0x160>)
 8004af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af4:	4606      	mov	r6, r0
 8004af6:	460f      	mov	r7, r1
 8004af8:	4640      	mov	r0, r8
 8004afa:	4649      	mov	r1, r9
 8004afc:	f7fb fce4 	bl	80004c8 <__aeabi_dmul>
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	4630      	mov	r0, r6
 8004b06:	4639      	mov	r1, r7
 8004b08:	f7fb fb28 	bl	800015c <__adddf3>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	460b      	mov	r3, r1
 8004b10:	4650      	mov	r0, sl
 8004b12:	4621      	mov	r1, r4
 8004b14:	f7fb fb20 	bl	8000158 <__aeabi_dsub>
 8004b18:	e7c6      	b.n	8004aa8 <__kernel_sin+0xc0>
 8004b1a:	bf00      	nop
 8004b1c:	f3af 8000 	nop.w
 8004b20:	5acfd57c 	.word	0x5acfd57c
 8004b24:	3de5d93a 	.word	0x3de5d93a
 8004b28:	8a2b9ceb 	.word	0x8a2b9ceb
 8004b2c:	3e5ae5e6 	.word	0x3e5ae5e6
 8004b30:	57b1fe7d 	.word	0x57b1fe7d
 8004b34:	3ec71de3 	.word	0x3ec71de3
 8004b38:	19c161d5 	.word	0x19c161d5
 8004b3c:	3f2a01a0 	.word	0x3f2a01a0
 8004b40:	1110f8a6 	.word	0x1110f8a6
 8004b44:	3f811111 	.word	0x3f811111
 8004b48:	55555549 	.word	0x55555549
 8004b4c:	3fc55555 	.word	0x3fc55555
 8004b50:	3fe00000 	.word	0x3fe00000

08004b54 <fabs>:
 8004b54:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004b58:	4619      	mov	r1, r3
 8004b5a:	4770      	bx	lr

08004b5c <finite>:
 8004b5c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8004b60:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8004b64:	0fc0      	lsrs	r0, r0, #31
 8004b66:	4770      	bx	lr

08004b68 <floor>:
 8004b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b6c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8004b70:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8004b74:	2e13      	cmp	r6, #19
 8004b76:	4607      	mov	r7, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	460c      	mov	r4, r1
 8004b7c:	4605      	mov	r5, r0
 8004b7e:	dc35      	bgt.n	8004bec <floor+0x84>
 8004b80:	2e00      	cmp	r6, #0
 8004b82:	da16      	bge.n	8004bb2 <floor+0x4a>
 8004b84:	a336      	add	r3, pc, #216	; (adr r3, 8004c60 <floor+0xf8>)
 8004b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8a:	f7fb fae7 	bl	800015c <__adddf3>
 8004b8e:	2200      	movs	r2, #0
 8004b90:	2300      	movs	r3, #0
 8004b92:	f7fb ff29 	bl	80009e8 <__aeabi_dcmpgt>
 8004b96:	b148      	cbz	r0, 8004bac <floor+0x44>
 8004b98:	2c00      	cmp	r4, #0
 8004b9a:	da5b      	bge.n	8004c54 <floor+0xec>
 8004b9c:	2500      	movs	r5, #0
 8004b9e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004ba2:	4a31      	ldr	r2, [pc, #196]	; (8004c68 <floor+0x100>)
 8004ba4:	433b      	orrs	r3, r7
 8004ba6:	42ab      	cmp	r3, r5
 8004ba8:	bf18      	it	ne
 8004baa:	4614      	movne	r4, r2
 8004bac:	4623      	mov	r3, r4
 8004bae:	462f      	mov	r7, r5
 8004bb0:	e026      	b.n	8004c00 <floor+0x98>
 8004bb2:	4a2e      	ldr	r2, [pc, #184]	; (8004c6c <floor+0x104>)
 8004bb4:	fa42 f806 	asr.w	r8, r2, r6
 8004bb8:	ea01 0208 	and.w	r2, r1, r8
 8004bbc:	4302      	orrs	r2, r0
 8004bbe:	d01f      	beq.n	8004c00 <floor+0x98>
 8004bc0:	a327      	add	r3, pc, #156	; (adr r3, 8004c60 <floor+0xf8>)
 8004bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc6:	f7fb fac9 	bl	800015c <__adddf3>
 8004bca:	2200      	movs	r2, #0
 8004bcc:	2300      	movs	r3, #0
 8004bce:	f7fb ff0b 	bl	80009e8 <__aeabi_dcmpgt>
 8004bd2:	2800      	cmp	r0, #0
 8004bd4:	d0ea      	beq.n	8004bac <floor+0x44>
 8004bd6:	2c00      	cmp	r4, #0
 8004bd8:	bfbe      	ittt	lt
 8004bda:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004bde:	fa43 f606 	asrlt.w	r6, r3, r6
 8004be2:	19a4      	addlt	r4, r4, r6
 8004be4:	ea24 0408 	bic.w	r4, r4, r8
 8004be8:	2500      	movs	r5, #0
 8004bea:	e7df      	b.n	8004bac <floor+0x44>
 8004bec:	2e33      	cmp	r6, #51	; 0x33
 8004bee:	dd0b      	ble.n	8004c08 <floor+0xa0>
 8004bf0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004bf4:	d104      	bne.n	8004c00 <floor+0x98>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	f7fb fab0 	bl	800015c <__adddf3>
 8004bfc:	4607      	mov	r7, r0
 8004bfe:	460b      	mov	r3, r1
 8004c00:	4638      	mov	r0, r7
 8004c02:	4619      	mov	r1, r3
 8004c04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c08:	f04f 32ff 	mov.w	r2, #4294967295
 8004c0c:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8004c10:	fa22 f808 	lsr.w	r8, r2, r8
 8004c14:	ea18 0f00 	tst.w	r8, r0
 8004c18:	d0f2      	beq.n	8004c00 <floor+0x98>
 8004c1a:	a311      	add	r3, pc, #68	; (adr r3, 8004c60 <floor+0xf8>)
 8004c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c20:	f7fb fa9c 	bl	800015c <__adddf3>
 8004c24:	2200      	movs	r2, #0
 8004c26:	2300      	movs	r3, #0
 8004c28:	f7fb fede 	bl	80009e8 <__aeabi_dcmpgt>
 8004c2c:	2800      	cmp	r0, #0
 8004c2e:	d0bd      	beq.n	8004bac <floor+0x44>
 8004c30:	2c00      	cmp	r4, #0
 8004c32:	da02      	bge.n	8004c3a <floor+0xd2>
 8004c34:	2e14      	cmp	r6, #20
 8004c36:	d103      	bne.n	8004c40 <floor+0xd8>
 8004c38:	3401      	adds	r4, #1
 8004c3a:	ea25 0508 	bic.w	r5, r5, r8
 8004c3e:	e7b5      	b.n	8004bac <floor+0x44>
 8004c40:	2301      	movs	r3, #1
 8004c42:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004c46:	fa03 f606 	lsl.w	r6, r3, r6
 8004c4a:	4435      	add	r5, r6
 8004c4c:	42bd      	cmp	r5, r7
 8004c4e:	bf38      	it	cc
 8004c50:	18e4      	addcc	r4, r4, r3
 8004c52:	e7f2      	b.n	8004c3a <floor+0xd2>
 8004c54:	2500      	movs	r5, #0
 8004c56:	462c      	mov	r4, r5
 8004c58:	e7a8      	b.n	8004bac <floor+0x44>
 8004c5a:	bf00      	nop
 8004c5c:	f3af 8000 	nop.w
 8004c60:	8800759c 	.word	0x8800759c
 8004c64:	7e37e43c 	.word	0x7e37e43c
 8004c68:	bff00000 	.word	0xbff00000
 8004c6c:	000fffff 	.word	0x000fffff

08004c70 <matherr>:
 8004c70:	2000      	movs	r0, #0
 8004c72:	4770      	bx	lr
 8004c74:	0000      	movs	r0, r0
	...

08004c78 <scalbn>:
 8004c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7a:	4616      	mov	r6, r2
 8004c7c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004c80:	4604      	mov	r4, r0
 8004c82:	460d      	mov	r5, r1
 8004c84:	460b      	mov	r3, r1
 8004c86:	b982      	cbnz	r2, 8004caa <scalbn+0x32>
 8004c88:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004c8c:	4303      	orrs	r3, r0
 8004c8e:	d034      	beq.n	8004cfa <scalbn+0x82>
 8004c90:	4b2d      	ldr	r3, [pc, #180]	; (8004d48 <scalbn+0xd0>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	f7fb fc18 	bl	80004c8 <__aeabi_dmul>
 8004c98:	4b2c      	ldr	r3, [pc, #176]	; (8004d4c <scalbn+0xd4>)
 8004c9a:	4604      	mov	r4, r0
 8004c9c:	429e      	cmp	r6, r3
 8004c9e:	460d      	mov	r5, r1
 8004ca0:	da0d      	bge.n	8004cbe <scalbn+0x46>
 8004ca2:	a325      	add	r3, pc, #148	; (adr r3, 8004d38 <scalbn+0xc0>)
 8004ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca8:	e01c      	b.n	8004ce4 <scalbn+0x6c>
 8004caa:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8004cae:	42ba      	cmp	r2, r7
 8004cb0:	d109      	bne.n	8004cc6 <scalbn+0x4e>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	f7fb fa52 	bl	800015c <__adddf3>
 8004cb8:	4604      	mov	r4, r0
 8004cba:	460d      	mov	r5, r1
 8004cbc:	e01d      	b.n	8004cfa <scalbn+0x82>
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004cc4:	3a36      	subs	r2, #54	; 0x36
 8004cc6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004cca:	4432      	add	r2, r6
 8004ccc:	428a      	cmp	r2, r1
 8004cce:	dd0c      	ble.n	8004cea <scalbn+0x72>
 8004cd0:	4622      	mov	r2, r4
 8004cd2:	462b      	mov	r3, r5
 8004cd4:	a11a      	add	r1, pc, #104	; (adr r1, 8004d40 <scalbn+0xc8>)
 8004cd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004cda:	f000 f83b 	bl	8004d54 <copysign>
 8004cde:	a318      	add	r3, pc, #96	; (adr r3, 8004d40 <scalbn+0xc8>)
 8004ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce4:	f7fb fbf0 	bl	80004c8 <__aeabi_dmul>
 8004ce8:	e7e6      	b.n	8004cb8 <scalbn+0x40>
 8004cea:	2a00      	cmp	r2, #0
 8004cec:	dd08      	ble.n	8004d00 <scalbn+0x88>
 8004cee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004cf2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004cf6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004cfa:	4620      	mov	r0, r4
 8004cfc:	4629      	mov	r1, r5
 8004cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d00:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004d04:	da0b      	bge.n	8004d1e <scalbn+0xa6>
 8004d06:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004d0a:	429e      	cmp	r6, r3
 8004d0c:	4622      	mov	r2, r4
 8004d0e:	462b      	mov	r3, r5
 8004d10:	dce0      	bgt.n	8004cd4 <scalbn+0x5c>
 8004d12:	a109      	add	r1, pc, #36	; (adr r1, 8004d38 <scalbn+0xc0>)
 8004d14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d18:	f000 f81c 	bl	8004d54 <copysign>
 8004d1c:	e7c1      	b.n	8004ca2 <scalbn+0x2a>
 8004d1e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004d22:	3236      	adds	r2, #54	; 0x36
 8004d24:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004d28:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004d2c:	4620      	mov	r0, r4
 8004d2e:	4629      	mov	r1, r5
 8004d30:	2200      	movs	r2, #0
 8004d32:	4b07      	ldr	r3, [pc, #28]	; (8004d50 <scalbn+0xd8>)
 8004d34:	e7d6      	b.n	8004ce4 <scalbn+0x6c>
 8004d36:	bf00      	nop
 8004d38:	c2f8f359 	.word	0xc2f8f359
 8004d3c:	01a56e1f 	.word	0x01a56e1f
 8004d40:	8800759c 	.word	0x8800759c
 8004d44:	7e37e43c 	.word	0x7e37e43c
 8004d48:	43500000 	.word	0x43500000
 8004d4c:	ffff3cb0 	.word	0xffff3cb0
 8004d50:	3c900000 	.word	0x3c900000

08004d54 <copysign>:
 8004d54:	b530      	push	{r4, r5, lr}
 8004d56:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8004d5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d5e:	ea42 0503 	orr.w	r5, r2, r3
 8004d62:	4629      	mov	r1, r5
 8004d64:	bd30      	pop	{r4, r5, pc}
	...

08004d68 <_init>:
 8004d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d6a:	bf00      	nop
 8004d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d6e:	bc08      	pop	{r3}
 8004d70:	469e      	mov	lr, r3
 8004d72:	4770      	bx	lr

08004d74 <_fini>:
 8004d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d76:	bf00      	nop
 8004d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d7a:	bc08      	pop	{r3}
 8004d7c:	469e      	mov	lr, r3
 8004d7e:	4770      	bx	lr
